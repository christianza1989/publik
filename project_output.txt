--- FILE: .\components.json ---
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "src/components",
    "utils": "src/lib/utils",
    "ui": "src/components/ui",
    "lib": "src/lib",
    "hooks": "src/hooks"
  },
  "iconLibrary": "lucide"
}


--- FILE: .\next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


--- FILE: .\next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'avatar.vercel.sh',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'images.unsplash.com', // Įsitikink, kad šis domenas yra pridėtas
        port: '',
        pathname: '/**',
      },
    ],
  },
};

module.exports = nextConfig;


--- FILE: .\package.json ---
{
  "dependencies": {
    "@radix-ui/react-accordion": "^1.2.12",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-tooltip": "^1.2.8",
    "@tailwindcss/postcss": "^4.1.12",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "embla-carousel-react": "^8.6.0",
    "framer-motion": "^12.23.12",
    "lucide-react": "^0.542.0",
    "next": "^15.5.2",
    "next-themes": "^0.4.6",
    "postcss": "^8.5.6",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-tsparticles": "^2.12.2",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^4.1.12",
    "tailwindcss-animate": "^1.0.7",
    "tsparticles-slim": "^2.12.0",
    "tw-animate-css": "^1.3.7"
  },
  "devDependencies": {
    "@types/node": "24.3.0",
    "@types/react": "^19.1.11",
    "typescript": "5.9.2"
  },
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }
}


--- FILE: .\postcss.config.mjs ---
const config = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};
export default config;


--- FILE: .\tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
        },
      },
    extend: {
      keyframes: {
        "icon-pulse": {
            "0%, 100%": { transform: 'scale(1)', filter: 'drop-shadow(0 0 0 rgba(74, 222, 128, 0))' },
            "50%": { transform: 'scale(1.1)', filter: 'drop-shadow(0 0 5px rgba(74, 222, 128, 0.5))' },
        },
      },
      animation: {
        "icon-pulse": 'icon-pulse 2.5s ease-in-out infinite',
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "subtle-gradient-pan": {
          "0%": {
            "background-position": "0% 50%",
            "background-size": "200% 200%",
          },
          "50%": {
            "background-position": "100% 50%",
            "background-size": "200% 200%",
          },
          "100%": {
            "background-position": "0% 50%",
            "background-size": "200% 200%",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "subtle-gradient-pan": "subtle-gradient-pan 25s ease infinite",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}


--- FILE: .\tsconfig.json ---
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "components/*": ["./src/components/*"],
      "lib/*": ["./src/lib/*"],
      "hooks/*": ["./src/hooks/*"],
      "ui/*": ["./src/components/ui/*"],
    },
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- FILE: .\src\app\globals.css ---
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  
  html,
  body {
    @apply w-full max-w-full overflow-x-hidden;
  }

  body {
    @apply bg-background text-foreground;
  }
  
  html {
    scroll-behavior: smooth;
  }

  main {
    @apply w-full overflow-x-hidden;
  }
}

@keyframes pulse-glow {
  0%, 100% {
    text-shadow: 0 0 10px rgba(167, 139, 250, 0.4), 0 0 20px rgba(167, 139, 250, 0.2);
  }
  50% {
    text-shadow: 0 0 20px rgba(167, 139, 250, 0.6), 0 0 40px rgba(167, 139, 250, 0.4);
  }
}

.animate-pulse-glow {
  animation: pulse-glow 4s ease-in-out infinite;
}

.animated-gradient-bg {
  background-image: linear-gradient(
    110deg,
    #020617, /* slate-950 */
    #1e1b4b, /* indigo-950 */
    #0f172a, /* slate-900 */
    #1e1b4b, /* indigo-950 */
    #020617  /* slate-950 */
  );
  animation: subtle-gradient-pan 25s ease infinite;
}

/* <<< PRADĖTI KOPIJUOTI ČIA >>> */
@keyframes button-pulse {
  0% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(99, 102, 241, 0.7);
  }
  70% {
    transform: scale(1.05);
    box-shadow: 0 0 0 10px rgba(99, 102, 241, 0);
  }
  100% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(99, 102, 241, 0);
  }
}

.animate-button-pulse {
  animation: button-pulse 2s infinite;
}

@keyframes subtle-pulse {
  0%, 100% { opacity: 0.6; transform: scale(1); }
  50% { opacity: 1; transform: scale(1.02); }
}

.animate-subtle-pulse {
  animation: subtle-pulse 3s ease-in-out infinite;
}

/* Shimmer efektas krovimo metu */
@keyframes shimmer {
  100% { transform: translateX(100%); }
}
.shimmer-bg {
  position: relative;
  overflow: hidden;
  background-color: #e2e8f0; /* dark:bg-slate-700 */
}
.shimmer-bg::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  transform: translateX(100%);
  background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.2) 20%, rgba(255,255,255,0.5) 60%, rgba(255,255,255,0) 100%);
  animation: shimmer 2s infinite;
}
.dark .shimmer-bg {
  background-color: #334155; /* slate-700 */
}

/* Blinking cursor efektas */
@keyframes blink {
  50% { border-color: transparent; }
}
.blinking-cursor {
  display: inline-block;
  width: 2px;
  height: 1em;
  background-color: currentColor;
  animation: blink 1s step-end infinite;
  margin-left: 2px;
}

@keyframes bounce-icon {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-10px);
  }
}

.animate-bounce-icon {
  animation: bounce-icon 1s infinite;
}
/* <<< PRADĖTI KOPIJUOTI ČIA FEATURES SECTION >>> */
.feature-card {
  position: relative;
}

.feature-card::before {
  content: '';
  position: absolute;
  inset: -2px;
  border-radius: 1.25rem; /* Turi atitikti kortelės border-radius + rėmelio storis */
  background: radial-gradient(300px circle at var(--x) var(--y), #a855f7, transparent 40%);
  opacity: 0;
  transition: opacity 0.3s ease;
  z-index: -1;
}

@media (hover: hover) {
  .feature-card:hover::before {
    opacity: 1;
  }

  .stat-card:hover::before {
    opacity: 1;
  }
}
/* <<< PRADĖTI KOPIJUOTI ČIA STATS SECTION >>> */
.stat-card::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: 1rem; /* Atitinka kortelės border-radius */
  padding: 2px; /* Rėmelio storis */
  background: conic-gradient(
    from var(--angle),
    #4f46e500,
    #a855f7,
    #4f46e500 25%
  );
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  animation:-spin 4s linear infinite;
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
}

@property --angle {
  syntax: "<angle>";
  initial-value: 0deg;
  inherits: false;
}

@keyframes -spin {
  to {
    --angle: 360deg;
  }
}


--- FILE: .\src\app\layout.tsx ---
// src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Header } from "src/components/homepage/Header";
import { ThemeProvider } from "src/components/ThemeProvider";
import { BackToTopButton } from "src/components/BackToTopButton";
import { ReactNode } from "react";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Publikuota.lt",
  description: "Automatizuota turinio rinkodaros platforma",
};

type Props = {
  children: ReactNode;
};

// The 'params: { locale }' object has been removed from the function signature.
export default function RootLayout({ children }: Props) {
  return (
    // The lang attribute is now hardcoded to "lt".
    <html lang="lt" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider
          attribute="class"
          defaultTheme="light"
          disableTransitionOnChange
        >
          <Header />
          {children}
          <BackToTopButton />
        </ThemeProvider>
      </body>
    </html>
  );
}


--- FILE: .\src\app\page.tsx ---
// src/app/[locale]/page.tsx
import { HeroSection } from "src/components/homepage/HeroSection";
import { InteractiveToolSection } from "src/components/homepage/InteractiveToolSection";
import { AudienceSection } from "src/components/homepage/AudienceSection";
import { InteractiveProcessSection } from "src/components/homepage/InteractiveProcessSection";
import { StatsSection } from "src/components/homepage/StatsSection";
import { ServicesSection } from "src/components/homepage/ServicesSection";
import { FeaturesSection } from "src/components/homepage/FeaturesSection";
import { SocialProofSection } from "src/components/homepage/SocialProofSection";
import { PartnersSection } from "src/components/homepage/PartnersSection";
import { PricingSection } from "src/components/homepage/PricingSection";
import { FaqSection } from "src/components/homepage/FaqSection";
import { FinalCtaSection } from "src/components/homepage/FinalCtaSection";
import { Footer } from "src/components/homepage/Footer";
import { GradientDivider } from "src/components/homepage/GradientDivider";

export default function HomePage() {
  return (
    <main className="bg-white dark:bg-slate-950">
      <HeroSection />
      
      <InteractiveToolSection />
      
{/* <GradientDivider /> */}
{/* <AudienceSection /> */}
      
      <InteractiveProcessSection />
      
{/* <StatsSection /> */}

<ServicesSection />

<GradientDivider />
      <FeaturesSection />
      
      <FinalCtaSection />


{/* <SocialProofSection />
  
<GradientDivider />
<PartnersSection /> */}

      <PricingSection />
      
      <GradientDivider />
      <FaqSection />
      
      <Footer />
    </main>
  );
}


--- FILE: .\src\components\BackToTopButton.tsx ---
// src/components/BackToTopButton.tsx
"use client";

import { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { ArrowUp } from "lucide-react";
import { Button } from "src/components/ui/button";

export const BackToTopButton = () => {
  const [isVisible, setIsVisible] = useState(false);

  // Funkcija, kuri valdo mygtuko matomumą
  const toggleVisibility = () => {
    if (window.scrollY > 300) {
      setIsVisible(true);
    } else {
      setIsVisible(false);
    }
  };

  // Funkcija, kuri sklandžiai grąžina į puslapio viršų
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  };

  useEffect(() => {
    window.addEventListener("scroll", toggleVisibility);

    // Išvalome event listener'į, kai komponentas sunaikinamas
    return () => {
      window.removeEventListener("scroll", toggleVisibility);
    };
  }, []);

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.8 }}
          transition={{ duration: 0.2 }}
          className="fixed bottom-8 right-8 z-50"
        >
          <Button
            size="icon"
            onClick={scrollToTop}
            className="rounded-full h-12 w-12 bg-indigo-600 hover:bg-indigo-700 text-white shadow-lg"
            aria-label="Grįžti į viršų"
          >
            <ArrowUp className="h-6 w-6" />
          </Button>
        </motion.div>
      )}
    </AnimatePresence>
  );
};


--- FILE: .\src\components\ThemeProvider.tsx ---
"use client"
import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
// PAKEITIMAS: Importuojame tipą tiesiogiai iš 'next-themes'
import { type ThemeProviderProps } from "next-themes"
export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}


--- FILE: .\src\components\homepage\AnimatedSection.tsx ---
// src/components/homepage/AnimatedSection.tsx
"use client";
import React from "react";
import { motion } from "framer-motion";

export const AnimatedSection = ({ children, className, id }: { children: React.ReactNode; className?: string; id?: string }) => {
  return (
    <motion.section
      id={id}
      initial={{ opacity: 0, y: 50 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true, amount: 0.2 }}
      transition={{ duration: 0.7, ease: "easeOut" }}
      className={className}
    >
      {children}
    </motion.section>
  );
};


--- FILE: .\src\components\homepage\AudienceSection.tsx ---
// src/components/homepage/AudienceSection.tsx
"use client"; // Būtina interaktyvumui
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "src/components/ui/card";
import { Button } from "src/components/ui/button";
import { Rocket, Gem } from "lucide-react";
import { AnimatedSection } from "./AnimatedSection";
import Link from "next/link";
import { SynergyIcon } from "./SynergyIcon"; // Importuojame naują komponentą
import { motion, Variants } from "framer-motion"; // Importuojame framer-motion ir Variants

export const AudienceSection = () => {
  const [hoveredCard, setHoveredCard] = useState<"business" | "publisher" | null>(null);

  const pathVariants: Variants = { // Explicitly type as Variants
    hidden: { pathLength: 0, opacity: 0 },
    visible: { pathLength: 1, opacity: 1, transition: { duration: 0.7, ease: [0.42, 0, 0.58, 1] } }, // Changed ease to cubic-bezier array
  };

  return (
    <AnimatedSection className="py-20 sm:py-28 bg-white dark:bg-slate-950">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
           <h2 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
             Du Pasauliai, Viena Ekosistema
           </h2>
           <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
             Atraskite, kaip „Publikuota.lt“ sujungia turinio poreikius ir monetizacijos galimybes.
           </p>
        </div>
        
        {/* Pagrindinis konteineris su santykiniu pozicionavimu */}
        <div className="relative max-w-5xl mx-auto">
          {/* SVG sluoksnis linijoms, pozicionuotas absoliučiai */}
          <motion.svg
            className="absolute top-0 left-0 w-full h-full pointer-events-none"
            viewBox="0 0 800 200"
            preserveAspectRatio="none"
            initial="hidden"
          >
            {/* Linija nuo Verslo kortelės */}
            <motion.path
              d="M 200 100 C 300 100, 300 100, 400 100"
              fill="none"
              stroke="url(#gradient)"
              strokeWidth="3"
              variants={pathVariants}
              animate={hoveredCard === "business" ? "visible" : "hidden"}
            />
            {/* Linija nuo Leidėjų kortelės */}
            <motion.path
              d="M 600 100 C 500 100, 500 100, 400 100"
              fill="none"
              stroke="url(#gradient)"
              strokeWidth="3"
              variants={pathVariants}
              animate={hoveredCard === "publisher" ? "visible" : "hidden"}
            />
            <defs>
                <linearGradient id="gradient" gradientTransform="rotate(90)">
                    <stop offset="0%" stopColor="#a5b4fc" />
                    <stop offset="100%" stopColor="#6366f1" />
                </linearGradient>
            </defs>
          </motion.svg>

          {/* Tinklelis kortelėms ir centriniam elementui */}
          <div className="grid grid-cols-1 md:grid-cols-[1fr_auto_1fr] items-center gap-8 z-10">
            
            {/* Verslui Kortelė */}
            <div onMouseEnter={() => setHoveredCard("business")} onMouseLeave={() => setHoveredCard(null)}>
              <Card className="text-center transition-all duration-300 hover:shadow-2xl hover:-translate-y-2 group h-full">
                <CardHeader>
                  <div className="flex justify-center mb-4">
                    <Rocket className="h-12 w-12 text-indigo-600 group-hover:scale-110 transition-transform duration-300" />
                  </div>
                  <CardTitle className="text-2xl font-bold dark:text-white">Verslui</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground mb-6">
                    Automatizuokite turinio kūrimą ir publikavimą, gaukite kokybiškas atgalines nuorodas ir auginkite savo SEO be pastangų.
                  </p>
                  <Button asChild className="mt-auto bg-indigo-600 hover:bg-indigo-700">
                    <Link href="https://portal.publikuota.lt/lt/signup">Sprendimai verslui</Link>
                  </Button>
                </CardContent>
              </Card>
            </div>
            
            {/* Centrinis elementas */}
            <div className="hidden md:block">
              <SynergyIcon />
            </div>

            {/* Leidėjams Kortelė */}
            <div onMouseEnter={() => setHoveredCard("publisher")} onMouseLeave={() => setHoveredCard(null)}>
              <Card className="text-center transition-all duration-300 hover:shadow-2xl hover:-translate-y-2 group h-full">
                <CardHeader>
                  <div className="flex justify-center mb-4">
                    <Gem className="h-12 w-12 text-green-600 group-hover:scale-110 transition-transform duration-300" />
                  </div>
                  <CardTitle className="text-2xl font-bold dark:text-white">Leidėjams</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-muted-foreground mb-6">
                    Monetizuokite savo portalo turinį, lengvai priimkite ir publikuokite kokybiškus straipsnius, generuodami papildomas pajamas.
                  </p>
                  <Button asChild className="mt-auto bg-green-600 hover:bg-green-700">
                    <Link href="https://portal.publikuota.lt/lt/signup">Galimybės leidėjams</Link>
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\FaqSection.tsx ---
// src/components/homepage/FaqSection.tsx
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { AnimatedSection } from "./AnimatedSection";
import Image from "next/image";
import { Button } from "../ui/button";
import { ArrowRight, DollarSign, Sparkles, HelpCircle, Puzzle, Cpu, GitBranch } from "lucide-react";

// <<< Atnaujintas DUK sąrašas su ikonomis >>>
const faqData = [
  {
    icon: <DollarSign className="h-6 w-6 text-indigo-500" />,
    question: "Kiek tai kainuoja?",
    answer: "Jūs mokate tik už konkrečias paslaugas. Publikacijos kaina priklauso nuo pasirinkto portalo, o už AI asistento paslaugas atsiskaitote kreditais. Nėra jokių mėnesinių mokesčių."
  },
  {
    icon: <Sparkles className="h-6 w-6 text-amber-500" />,
    question: "Ar AI sukurtas turinys yra unikalus?",
    answer: "Taip, mūsų dirbtinio intelekto (AI) modeliai yra apmokyti kurti visiškai unikalų turinį. Kiekvienas straipsnis yra patikrinamas dėl plagiato, siekiant užtikrinti jo originalumą."
  },
  {
    icon: <HelpCircle className="h-6 w-6 text-emerald-500" />,
    question: "Kaip veikia atsiskaitymai?",
    answer: "Visi atsiskaitymai vyksta per mūsų saugią platformą. Galite papildyti savo sąskaitos kreditus, kurie bus naudojami tiek publikacijų užsakymams, tiek DI paslaugoms."
  },
  {
    icon: <Puzzle className="h-6 w-6 text-sky-500" />,
    question: "Ar galiu naudoti platformą, jei mano svetainė sukurta su WordPress?",
    answer: "Žinoma! Mes turime specialiai sukurtą WordPress įskiepį, kuris leidžia leidėjams sklandžiai ir automatiškai priimti ir publikuoti straipsnius tiesiai iš „Publikuota.lt“ platformos."
  },
  {
    icon: <GitBranch className="h-6 w-6 text-orange-500" />,
    question: "Ar galiu naudotis platforma, jeigu mano svetainė ne WordPress?",
    answer: "Šiuo metu mūsų automatinė integracija ir specialus įskiepis yra pritaikytas tik WordPress turinio valdymo sistemai. Tačiau mes aktyviai dirbame ties sprendimais ir kitoms populiarioms platformoms. Kviečiame prenumeruoti mūsų naujienlaiškį, kad pirmieji sužinotumėte apie naujas integracijos galimybes!"
  },
  {
    icon: <Cpu className="h-6 w-6 text-rose-500" />,
    question: "Kuo Publikuota.lt pranašesnė už tradicinę naujienų sklaidą?",
    answer: "Mūsų platforma apjungia geriausius abiejų pasaulių aspektus: greitį, efektyvumą ir prieinamą kainą. Jūs gaunate kokybišką turinį ir publikacijas žymiai greičiau ir pigiau, nei dirbant su tradiciniais tiekėjais."
  }
];

export const FaqSection = () => {
  return (
    <AnimatedSection id="faq" className="relative py-20 sm:py-28 bg-gray-50 dark:bg-slate-900 overflow-hidden">
        {/* <<< Foninis gradientas >>> */}
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[1000px] h-[1000px] bg-radial-gradient(circle, rgba(167, 139, 250, 0.1), transparent 60%) dark:bg-radial-gradient(circle, rgba(167, 139, 250, 0.05), transparent 70%) pointer-events-none"></div>

        <div className="container mx-auto px-4 relative z-10">
            <div className="text-center mb-16">
                <h2 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
                    Dažniausiai Užduodami Klausimai
                </h2>
                <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
                    Radote atsakymą į savo klausimą? Jei ne, mes visada pasiruošę padėti.
                </p>
            </div>

            {/* <<< Struktūros pakeitimas į dvispalvį (split) išdėstymą >>> */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16 items-start">
                
                {/* Kairė pusė: Akordeonas */}
                <div className="space-y-4">
                    <Accordion type="single" collapsible className="w-full">
                        {faqData.map((item, index) => (
                            <AccordionItem value={`item-${index + 1}`} key={index} className="bg-white dark:bg-slate-800/50 border dark:border-slate-700/50 rounded-lg shadow-sm mb-4 px-6">
                                {/* <<< Patobulintas akordeono trigeris su ikona >>> */}
                                <AccordionTrigger className="text-left font-semibold text-gray-800 dark:text-gray-100 hover:no-underline text-base">
                                    <div className="flex items-center gap-4">
                                        {item.icon}
                                        <span>{item.question}</span>
                                    </div>
                                </AccordionTrigger>
                                {/* <<< Patobulintas turinys su šonine linija >>> */}
                                <AccordionContent className="pt-2">
                                    <div className="border-l-2 border-indigo-500 pl-6 text-muted-foreground">
                                        {item.answer}
                                    </div>
                                </AccordionContent>
                            </AccordionItem>
                        ))}
                    </Accordion>
                    
                    {/* <<< Papildomas CTA blokas >>> */}
                    <div className="text-center mt-8">
                        <Button variant="ghost">
                            Nerandate atsakymo? Susisiekite
                            <ArrowRight className="ml-2 h-4 w-4" />
                        </Button>
                    </div>
                </div>

                {/* Dešinė pusė: Vizualinis elementas */}
                <div className="hidden lg:block lg:sticky top-24">
                    <div className="relative w-full h-[500px] rounded-2xl overflow-hidden shadow-2xl">
                        <Image
                            src="https://images.unsplash.com/photo-1587440871875-191322ee64b0?q=80&w=2071&auto=format&fit=crop"
                            alt="Support representative"
                            fill
                            className="object-cover"
                        />
                         {/* <<< Efektas nuotraukai >>> */}
                        <div className="absolute inset-0 bg-indigo-500/10 mix-blend-multiply"></div>
                        <div className="absolute inset-0 ring-1 ring-inset ring-black/10 dark:ring-white/10 rounded-2xl"></div>
                    </div>
                </div>

            </div>
        </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\FeatureIcons.tsx ---
// src/components/homepage/FeatureIcons.tsx
import { Zap, Search, CheckCircle, BarChart, Trophy, Clock, BrainCircuit } from 'lucide-react';
import React from 'react';

export const ProcessIcons = {
  Idea: () => <Zap className="h-8 w-8 text-indigo-500" />,
  Search: () => <Search className="h-8 w-8 text-indigo-500" />,
  Publish: () => <CheckCircle className="h-8 w-8 text-indigo-500" />,
};

export const SeoIcons = {
  Network: () => <BarChart className="h-8 w-8 text-green-500" />,
  Quality: () => <Trophy className="h-8 w-8 text-green-500" />,
  Speed: () => <Clock className="h-8 w-8 text-green-500" />,
};

// Pavyzdinė SVG iliustracija DI Asistentui
export const AiAssistantIllustration = () => (
  <div className="flex items-center justify-center h-full w-full">
     <BrainCircuit className="h-32 w-32 text-purple-400 opacity-80" />
  </div>
);

// Pavyzdinė SVG iliustracija procesui
export const ProcessIllustration = () => (
  <div className="flex items-center justify-center h-full w-full p-8">
    <svg width="100%" height="100%" viewBox="0 0 300 100">
        <circle cx="50" cy="50" r="15" fill="#e0e7ff" stroke="#6366f1" strokeWidth="2"/>
        <path d="M 65 50 Q 125 20, 150 50" stroke="#a5b4fc" strokeWidth="2" fill="none" strokeDasharray="5,5"/>
        <circle cx="150" cy="50" r="15" fill="#e0e7ff" stroke="#6366f1" strokeWidth="2"/>
        <path d="M 165 50 Q 225 80, 250 50" stroke="#a5b4fc" strokeWidth="2" fill="none" strokeDasharray="5,5"/>
        <circle cx="250" cy="50" r="15" fill="#e0e7ff" stroke="#6366f1" strokeWidth="2"/>
    </svg>
  </div>
);


--- FILE: .\src\components\homepage\FeaturesSection.tsx ---
// src/components/homepage/FeaturesSection.tsx
"use client";
import { Card, CardContent } from "src/components/ui/card";
import { CheckCircle, XCircle } from "lucide-react";
import { AnimatedSection } from "./AnimatedSection";

const comparisonData = [
  { feature: "Proceso trukmė", traditional: "Dienos / savaitės", publikuota: "AI sukuria per kelias minutes" },
  { feature: "Publikavimo procesas", traditional: "Lėtas ir rankiniu būdu", publikuota: "Automatizuotas" },
  { feature: "Portalų paieška", traditional: "Rankinis darbas, derybos", publikuota: "AI atlieka automatiškai" },
  { feature: "Turinio kūrimas", traditional: "Samdymas, ilgos paieškos", publikuota: "Greitas, patogus (AI arba rašytojas)" },
  { feature: "SEO optimizavimas", traditional: "Brangu, ilga", publikuota: "Įskaičiuota / optimizuota automatiškai" },
  { feature: "Atsiskaitymai", traditional: "Daug sąskaitų", publikuota: "Viena platforma" },
];

export const FeaturesSection = () => {
  return (
    <AnimatedSection id="features" className="py-20 sm:py-28 bg-gray-50 dark:bg-slate-900">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
<h2 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
  Senas būdas vs. Publikuota.lt
</h2>
          <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
            Akivaizdūs pranašumai, kurie leis jums pamiršti rankinį darbą amžiams.
          </p>
        </div>

        <div className="w-full max-w-4xl mx-auto">
          {/* Mobile View - Cards */}
          <div className="md:hidden space-y-4">
            {comparisonData.map((item) => (
              <Card key={item.feature} className="dark:bg-slate-800/50 dark:backdrop-blur-sm shadow-lg">
                <CardContent className="p-4 space-y-3">
                  <div className="font-bold text-lg text-gray-900 dark:text-white">{item.feature}</div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="font-semibold text-gray-500 dark:text-gray-400">Tradicinis Būdas:</span>
                    <div className="flex items-center gap-2 text-gray-500 dark:text-gray-400">
                      <XCircle className="h-5 w-5 text-red-400 flex-shrink-0" />
                      <span>{item.traditional}</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="font-semibold text-gray-800 dark:text-white">Su Publikuota.lt:</span>
                    <div className="flex items-center gap-2 font-semibold text-gray-800 dark:text-white">
                      <CheckCircle className="h-5 w-5 text-green-400 flex-shrink-0 animate-icon-pulse" />
                      <span>{item.publikuota}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Desktop View - Table */}
          <div className="hidden md:block">
            <Card className="dark:bg-slate-800/50 dark:backdrop-blur-sm shadow-xl">
              <CardContent className="p-0">
                <div className="overflow-x-auto">
                  <table className="min-w-full text-sm text-left">
                    <thead className="bg-gray-100/50 dark:bg-white/5">
                      <tr>
                        <th scope="col" className="py-4 px-6 font-semibold text-gray-900 dark:text-white">Savybė</th>
                        <th scope="col" className="py-4 px-6 font-semibold text-gray-500 dark:text-gray-400">Tradicinis Būdas</th>
                        <th scope="col" className="py-4 px-6 font-semibold text-gray-900 dark:text-white">Su Publikuota.lt</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200 dark:divide-white/10">
                      {comparisonData.map((item) => (
                        <tr key={item.feature}>
                          <td className="whitespace-nowrap py-5 px-6 font-medium text-gray-900 dark:text-white">
                            {item.feature}
                          </td>
                          <td className="whitespace-nowrap py-5 px-6">
                            <div className="flex items-center gap-2 text-gray-500 dark:text-gray-400">
                              <XCircle className="h-5 w-5 text-red-400 flex-shrink-0" />
                              <span>{item.traditional}</span>
                            </div>
                          </td>
                          <td className="whitespace-nowrap py-5 px-6 bg-green-500/5">
                            <div className="flex items-center gap-2 font-semibold text-gray-800 dark:text-white">
                              <CheckCircle className="h-5 w-5 text-green-400 flex-shrink-0 animate-icon-pulse" />
                              <span>{item.publikuota}</span>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\FinalCtaSection.tsx ---
// src/components/homepage/FinalCtaSection.tsx
"use client";
import { AnimatedSection } from "./AnimatedSection";
import { Button } from "src/components/ui/button";
import Link from "next/link";
import { Gift } from 'lucide-react';
import Image from 'next/image';

export const FinalCtaSection = () => {
  return (
    <AnimatedSection className="bg-white dark:bg-slate-950">
      <div className="container mx-auto px-4 py-20 sm:py-28">
        {/* Pagrindinis konteineris su paveikslėliu fone */}
        <div className="relative isolate overflow-hidden rounded-3xl shadow-2xl">
          {/* Foninis paveikslėlis */}
          <Image
            src="https://images.unsplash.com/photo-1521737604893-d14cc237f11d?q=80&w=2073&auto=format&fit=crop"
            alt="Komanda dirba moderniame biure"
            fill
            priority
            className="absolute inset-0 h-full w-full object-cover -z-10"
          />
          {/* Tamsus permatomas sluoksnis */}
          <div className="absolute inset-0 bg-gray-900/60 mix-blend-multiply" />
          
          {/* Gradiento perdanga viršuje */}
          <div className="absolute inset-0 bg-gradient-to-br from-indigo-900/50 via-slate-900/50 to-purple-900/50" />

          <div className="relative z-10 max-w-4xl mx-auto text-center py-16 px-6 sm:py-24 lg:py-32">
            <div className="flex justify-center mb-4">
                <div className="bg-white/10 p-3 rounded-full backdrop-blur-sm">
                    <Gift className="h-8 w-8 text-red-500 animate-bounce-icon" />
                </div>
            </div>
<h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl lg:text-5xl">
  Kviečiame išbandyti
</h2>
            <p className="mx-auto mt-6 max-w-2xl text-lg leading-8 text-gray-200">
              Užsiregistruokite visiškai nemokamai ir išbandykite platformos galią patys. Sugeneruokite pirmąjį savo straipsnį ir mes padovanosime jo publikavimą net <strong className="font-bold text-white">penkiuose</strong> mūsų partnerių portaluose!
            </p>
            <div className="mt-10 flex items-center justify-center gap-x-6">
              <Button asChild size="lg" className="bg-indigo-500 hover:bg-indigo-400 text-white font-semibold px-8 py-6 text-base transform transition-transform duration-200 hover:scale-105">
                <Link href="https://portal.publikuota.lt/lt/signup">Gauti 5 nemokamas publikacijas</Link>
              </Button>
            </div>
          </div>
        </div>
      </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\Footer.tsx ---
// src/components/homepage/Footer.tsx
import Link from "next/link";
import { Twitter, Linkedin, Facebook, Send } from 'lucide-react';
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { HeroParticles } from "./effects/HeroParticles";

export const Footer = () => {
  const year = new Date().getFullYear();

  return (
    <footer className="relative overflow-hidden animated-gradient-bg text-white" aria-labelledby="footer-heading">
        <HeroParticles id="footer-particles" />
      <h2 id="footer-heading" className="sr-only">
        Footer
      </h2>
      <div className="relative z-10 container mx-auto px-4 py-16 sm:py-20">
        <div className="lg:grid lg:grid-cols-12 lg:gap-8">
          
          {/* Kairė pusė: Naujienlaiškis */}
          <div className="lg:col-span-5 xl:col-span-6 mb-12 lg:mb-0">
            <h3 className="text-2xl font-bold tracking-tight">Gaukite naujienas pirmieji</h3>
            <p className="mt-4 text-base text-gray-300">
              Prenumeruokite mūsų naujienlaiškį ir sužinokite apie platformos atnaujinimus, rinkodaros tendencijas ir specialius pasiūlymus.
            </p>
            <form className="mt-6 sm:flex sm:max-w-md">
              <Input
                type="email"
                name="email-address"
                id="email-address"
                autoComplete="email"
                required
                className="w-full min-w-0 appearance-none rounded-md border-0 bg-white/5 px-3 py-2 text-white shadow-sm ring-1 ring-inset ring-white/10 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6"
                placeholder="Jūsų el. paštas"
              />
              <div className="mt-4 sm:ml-4 sm:mt-0 sm:flex-shrink-0">
                <Button type="submit" className="flex w-full items-center justify-center rounded-md bg-indigo-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                  Prenumeruoti <Send className="ml-2 h-4 w-4" />
                </Button>
              </div>
            </form>
          </div>

          {/* Dešinė pusė: Nuorodų tinklelis */}
          <div className="lg:col-span-7 xl:col-span-6">
            <div className="grid grid-cols-2 md:grid-cols-3 gap-8">
              <div>
                <h3 className="text-sm font-semibold leading-6">Produktas</h3>
                <ul role="list" className="mt-6 space-y-4">
                  <li><a href="#" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Kaip veikia</a></li>
                  <li><a href="#pricing" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Kainodara</a></li>
                  <li><a href="#" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Verslui</a></li>
                  <li><a href="#" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Leidėjams</a></li>
                </ul>
              </div>
              <div>
                <h3 className="text-sm font-semibold leading-6">Resursai</h3>
                 <ul role="list" className="mt-6 space-y-4">
                  <li><a href="#faq" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">DUK</a></li>
                  <li><a href="#" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Tinklaraštis</a></li>
                  <li><a href="#" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Pagalba</a></li>
                </ul>
              </div>
              <div>
                <h3 className="text-sm font-semibold leading-6">Įmonė</h3>
                 <ul role="list" className="mt-6 space-y-4">
                  <li><a href="#" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Apie mus</a></li>
                  <li><a href="#" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Kontaktai</a></li>
                  <li><a href="#" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Privatumo politika</a></li>
                  <li><a href="#" className="text-sm leading-6 text-gray-300 hover:text-indigo-400 transition-colors">Taisyklės</a></li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        
        {/* Apatinė juosta */}
<div className="mt-16 border-t border-white/10 pt-8 sm:mt-20 lg:mt-24 text-center">
  <p className="text-xs leading-5 text-gray-400">
    &copy; {year} Publikuota.lt. Visos teisės saugomos.
  </p>
</div>
      </div>
    </footer>
  );
};


--- FILE: .\src\components\homepage\GradientDivider.tsx ---
// src/components/homepage/GradientDivider.tsx

export const GradientDivider = () => {
  return (
    <div className="container mx-auto px-4">
      <div className="h-px w-full bg-gradient-to-r from-transparent via-indigo-300 dark:via-indigo-800 to-transparent" />
    </div>
  );
};


--- FILE: .\src\components\homepage\Header.tsx ---
"use client";
import { useState, useEffect } from 'react';
import Link from "next/link";
import { Button, buttonVariants } from 'src/components/ui/button';
import { motion, useScroll, useMotionValueEvent, AnimatePresence } from 'framer-motion';
import { Menu, X, Sun, Moon, BookOpenCheck } from 'lucide-react';
import { useTheme } from "next-themes";

export const Header = () => {
  const { setTheme, theme } = useTheme();
  const [hidden, setHidden] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { scrollY } = useScroll();

  useMotionValueEvent(scrollY, "change", (latest) => {
    const previous = scrollY.getPrevious() || 0;
    if (latest > previous && latest > 150) {
      setHidden(true);
      setIsMobileMenuOpen(false); // Automatiškai uždaryti meniu slenkant žemyn
    } else {
      setHidden(false);
    }
  });

  // Efektas, kuris neleidžia slinkti puslapiui, kai meniu atidarytas
  useEffect(() => {
    if (isMobileMenuOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }

    // Išvalymo funkcija, kuri atstato stilių, jei komponentas būtų sunaikintas
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isMobileMenuOpen]);
  
  const navLinks = [
    { href: '#how-it-works', label: 'Kaip veikia?' },
    { href: '#features', label: 'Privalumai' },
    { href: '#pricing', label: 'Kainodara' },
    { href: '#faq', label: 'DUK' },
];

  const MobileMenu = () => (
    <motion.div
      key="mobile-menu"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.2 }}
      // <<< PATAISYMAS: Pakeistas z-index iš z-40 į z-50 >>>
      className="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm md:hidden"
      onClick={() => setIsMobileMenuOpen(false)} // Uždaryti meniu paspaudus ant fono
    >
      <motion.div
        initial={{ x: "100%" }}
        animate={{ x: 0 }}
        exit={{ x: "100%" }}
        transition={{ type: "spring", stiffness: 300, damping: 30 }}
        // <<< PATAISYMAS: Pridėtas z-60 ir sustabdomas paspaudimo sklidimas >>>
        className="fixed top-0 right-0 bottom-0 z-60 w-full max-w-sm bg-slate-900 p-6 flex flex-col h-full overflow-y-auto"
        onClick={(e) => e.stopPropagation()} // Sustabdo paspaudimo perdavimą fonui
      >
        <div className="flex justify-between items-center mb-10">
          <Link href="/" className="flex items-center gap-2 text-xl font-bold text-white" onClick={() => setIsMobileMenuOpen(false)}>
            <BookOpenCheck className="h-6 w-6 text-green-400" />
            <span>Publikuota.lt</span>
          </Link>
          <Button onClick={() => setIsMobileMenuOpen(false)} variant="ghost" size="icon" className="text-white hover:bg-white/10 hover:text-white">
            <X />
          </Button>
        </div>
        
        <nav className="flex flex-col items-center gap-6 flex-grow">
          {navLinks.map(link => (
            <a 
              key={link.href} 
              href={link.href} 
              onClick={() => setIsMobileMenuOpen(false)}
              className="text-xl font-medium text-gray-300 hover:text-white transition-colors"
            >
              {link.label}
            </a>
          ))}
        </nav>
        
        <div className="flex flex-col gap-4 mt-10">
          <div className="flex items-center justify-center gap-2">
            <a href="https://portal.publikuota.lt/lt/login" onClick={() => setIsMobileMenuOpen(false)} className={buttonVariants({ variant: "ghost", className: "text-white hover:bg-white/10 hover:text-white w-full" })}>Prisijungti</a>
            {/*
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setTheme(theme === "light" ? "dark" : "light")}
              className="text-white hover:bg-white/10 hover:text-white"
            >
              <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
              <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
              <span className="sr-only">Toggle theme</span>
            </Button>
            */}
          </div>
          <a href="https://portal.publikuota.lt/lt/signup" onClick={() => setIsMobileMenuOpen(false)} className={buttonVariants({ className: "bg-indigo-600 hover:bg-indigo-700 w-full" })}>Registruotis</a>
        </div>
      </motion.div>
    </motion.div>
  );

  return (
    <>
      <motion.header
        variants={{
          visible: { y: 0 },
          hidden: { y: "-100%" },
        }}
        animate={hidden ? "hidden" : "visible"}
        transition={{ duration: 0.35, ease: "easeInOut" }}
        className="fixed top-0 left-0 w-full z-50 backdrop-blur-sm border-b border-slate-800 dark"
      >
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center h-16">
            <Link href="/" className="flex items-center gap-2 text-xl font-bold text-white">
              <BookOpenCheck className="h-6 w-6 text-green-400" />
              <span>Publikuota.lt</span>
            </Link>

            <nav className="hidden md:flex items-center gap-6">
              {navLinks.map(link => (
                  <a key={link.href} href={link.href} className="text-sm font-medium text-gray-300 hover:text-white transition-colors">{link.label}</a>
              ))}
            </nav>

            <div className="hidden md:flex items-center gap-2">
              {/*
              <Button
                variant="ghost"
                size="icon"
                onClick={() => setTheme(theme === "light" ? "dark" : "light")}
                className="text-white hover:bg-white/10 hover:text-white"
              >
                <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
                <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
                <span className="sr-only">Toggle theme</span>
              </Button>
              */}
              
              <a href="https://portal.publikuota.lt/lt/login" className={buttonVariants({ variant: "ghost", className: "text-white hover:bg-white/10 hover:text-white" })}>Prisijungti</a>
              <a href="https://portal.publikuota.lt/lt/signup" className={buttonVariants({ className: "bg-indigo-600 hover:bg-indigo-700" })}>Registruotis</a>
            </div>

            <div className="md:hidden">
                <Button onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)} variant="ghost" size="icon" className="text-white hover:bg-white/10 hover:text-white">
                    {isMobileMenuOpen ? <X/> : <Menu />}
                </Button>
            </div>
          </div>
        </div>
      </motion.header>

      <AnimatePresence>
        {isMobileMenuOpen && <MobileMenu />}
      </AnimatePresence>
    </>
  );
};


--- FILE: .\src\components\homepage\HeroSection.tsx ---
// src/components/homepage/HeroSection.tsx
"use client";
import { HeroParticles } from "./effects/HeroParticles";
import { motion } from "framer-motion";
import { FloatingCode } from "./effects/FloatingCode";
import { ScrollIndicator } from "./effects/ScrollIndicator";

export const HeroSection = () => {
  return (
    <section className="relative h-screen w-full flex flex-col items-center justify-center overflow-hidden animated-gradient-bg text-white dark">
      <HeroParticles id="hero-particles" />
      <FloatingCode />
      
      <motion.div
        initial="hidden"
        animate="visible"
        variants={{
          visible: { transition: { staggerChildren: 0.2 } },
          hidden: {},
        }}
        className="relative z-10 text-center px-4"
      >
        {/* <<< ATNAUJINTA ANTRAŠTĖ >>> */}
        <motion.h1
          variants={{
            hidden: { opacity: 0, y: 20 },
            visible: { opacity: 1, y: 0, transition: { duration: 0.6 } },
          }}
          className="text-4xl font-bold tracking-tight sm:text-5xl md:text-6xl lg:text-7xl font-sans max-w-4xl"
        >
          Naujos kartos naujienų ir rinkodaros platforma
        </motion.h1>

        {/* <<< ATNAUJINTA POANTRAŠTĖ >>> */}
        <motion.p
          variants={{
            hidden: { opacity: 0, y: 20 },
            visible: { opacity: 1, y: 0, transition: { duration: 0.6 } },
          }}
          className="mt-6 max-w-2xl mx-auto text-lg text-gray-300"
        >
          Automatizuok straipsnių publikavimą. Išsirink portalus, publikuok, gauk rezultatą ir taupyk laiką.
        </motion.p>
        
        {/* Mygtukai ir partneriai buvo čia ir dabar yra pašalinti */}

      </motion.div>

      <ScrollIndicator />
    </section>
  );
};


--- FILE: .\src\components\homepage\InteractiveProcessSection.tsx ---
// src/components/homepage/InteractiveProcessSection.tsx
"use client";
import { AnimatedSection } from "./AnimatedSection";
import { motion, Variants } from "framer-motion";
// <<< PAKEITIMAS: Importuojamos naujos, labiau tinkančios ikonos >>>
import { Newspaper, Send, UserCheck } from "lucide-react";

// <<< PAKEITIMAS: Atnaujintas visas `processSteps` masyvas >>>
const processSteps = [
  {
    icon: <Newspaper className="h-8 w-8 text-indigo-400" />,
    title: "Publikuoti naujieną",
    description: "Siūlykite savo naujieną keliems portalams vienu metu. Redaktoriai ją matys savo paskyrose ir galės publikuoti vienu paspaudimu – kaip naujos kartos naujienų agentūroje."
  },
  {
    icon: <Send className="h-8 w-8 text-sky-400" />,
    title: "Užsisakyti straipsnį",
    description: "Paskelbkite straipsnį konkrečiame portale ar portaluose. Pasirinkite žiniasklaidos kanalą, įkelkite tekstą ir publikuokite be tarpininkų – greitai ir skaidriai."
  },
  {
    icon: <UserCheck className="h-8 w-8 text-green-400" />,
    title: "Tapti partneriu",
    description: "Valdykite savo portalą ir uždirbkite iš turinio. Gaukite straipsnių pasiūlymus, nustatykite kainas ir publikuokite turinį pagal savo taisykles."
  }
];

export const InteractiveProcessSection = () => {
  const cardVariants: Variants = {
    hidden: { opacity: 0, y: 50, scale: 0.95 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        delay: i * 0.2,
        duration: 0.6,
        ease: "easeOut"
      }
    })
  };

  return (
    <AnimatedSection id="how-it-works" className="relative py-20 sm:py-32 overflow-hidden">
      {/* Foninis paveikslėlis su perdanga */}
      <div className="absolute inset-0 z-0">
        <img 
          src="https://images.unsplash.com/photo-1454165804606-c3d57bc86b40?q=80&w=2070&auto=format&fit=crop" 
          alt="Darbo procesas" 
          className="w-full h-full object-cover"
        />
        <div className="absolute inset-0 animated-gradient-bg opacity-80"></div>
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <div className="text-center mb-16">
          {/* <<< PAKEITIMAS: Atnaujinta sekcijos antraštė >>> */}
          <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl lg:text-5xl">
            Kaip tai veikia?
          </h2>
          <p className="mt-4 max-w-2xl mx-auto text-lg text-gray-300">
            Trys paprasti būdai pasiekti savo tikslus mūsų platformoje.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {processSteps.map((step, index) => (
            <motion.div
              key={step.title}
              custom={index}
              variants={cardVariants}
              initial="hidden"
              whileInView="visible"
              viewport={{ once: true, amount: 0.5 }}
              className="bg-white/5 dark:bg-slate-800/30 p-8 rounded-2xl backdrop-blur-lg border border-white/10 transition-all duration-300 hover:border-white/20 hover:bg-white/10"
            >
              <div className="flex-shrink-0 mb-6">
                <div className="inline-block p-4 bg-white/10 rounded-xl">
                  {step.icon}
                </div>
              </div>
              <h3 className="text-xl font-semibold text-white">{step.title}</h3>
              <p className="mt-4 text-gray-300">
                {step.description}
              </p>
            </motion.div>
          ))}
        </div>
      </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\InteractiveToolSection.tsx ---
// src/components/homepage/InteractiveToolSection.tsx
"use client";
import { useState, useEffect, useRef } from "react";
import { Button } from "src/components/ui/button";
import { Input } from "src/components/ui/input";
import { Card } from "src/components/ui/card";
import { Check, Info, Link as LinkIcon, Sparkles, Star, RefreshCw, X, FileText } from "lucide-react";
import { motion, AnimatePresence, useInView } from "framer-motion";
import { AnimatedSection } from "./AnimatedSection";
import Link from "next/link";
import { getImageForTopic } from "src/lib/image-map";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "src/components/ui/tooltip";
import { Badge } from "src/components/ui/badge";

// --- Pagalbiniai komponentai (lieka nepakitę) ---
const StepIndicator = ({ step, totalSteps }: { step: number; totalSteps: number }) => (
  <div className="flex justify-center items-center gap-2 mb-6">
    {Array.from({ length: totalSteps }).map((_, i) => (
      <motion.div
        key={i}
        animate={{
          width: i + 1 === step ? '2.5rem' : '1.5rem',
          backgroundColor: i + 1 < step ? '#4f46e5' : i + 1 === step ? '#818cf8' : '#e5e7eb'
        }}
        transition={{ type: 'spring', stiffness: 300, damping: 20 }}
        className="h-2 rounded-full"
      />
    ))}
  </div>
);

const InfoTooltip = ({ content }: { content: React.ReactNode }) => (
  <TooltipProvider delayDuration={100}>
    <Tooltip>
      <TooltipTrigger asChild><button type="button" className="ml-2 text-gray-400 hover:text-gray-600"><Info size={16} /></button></TooltipTrigger>
      <TooltipContent><p className="max-w-xs">{content}</p></TooltipContent>
    </Tooltip>
  </TooltipProvider>
);

// <<< DUOMENYS IŠKELTI Į ATSKIRUS OBJEKTUS >>>
const demoDataFirst = {
  topic: "Dirbtinis intelektas",
  url: "https://geranaujiena.lt/dirbtinis-intelektas", // <<< PRIDĖTI
  titles: [
    "5 būdai, kaip dirbtinis intelektas keičia verslo pasaulį 2025 metais",
    "Dirbtinis intelektas: ar Jūsų verslas pasiruošęs ateities revoliucijai?",
    "Praktinis gidas: Kaip pritaikyti AI sprendimus smulkiam verslui?",
    "Efektyvumo didinimas su AI: realūs pavyzdžiai ir sėkmės strategijos",
    "Dirbtinio intelekto ateitis: prognozės ir galimybės, kurių negalima ignoruoti"
  ],
  keywords: ["dirbtinis intelektas", "AI verslui", "mašininis mokymasis", "automatizavimas", "duomenų analizė", "AI įrankiai", "ateities technologijos", "efektyvumas"],
  imageIdentifier: "intelektas",
  // <<< NAUJA: Kiekvienam pavadinimui - atskira ištrauka >>>
  snippets: {
    "5 būdai, kaip dirbtinis intelektas keičia verslo pasaulį 2025 metais": `
      <p>2025-ieji žymi naują verslo erą, kurioje <strong>dirbtinis intelektas (AI)</strong> nebėra tik ateities prognozė – tai galingas įrankis, šiandien lemiantis rinkos lyderius. Nuo hiperpersonalizuotos rinkodaros iki autonominių tiekimo grandinių, AI įtaka tampa fundamentali.</p>
      <p>Šiame straipsnyje išsamiai nagrinėsime <strong>penkias pagrindines sritis</strong>, kuriose AI jau dabar kuria didžiausią vertę:</p>
      <ul>
        <li><strong>Klientų Patirtis:</strong> Kaip realiu laiku veikiančios sistemos numato klientų poreikius ir kuria unikalias patirtis.</li>
        <li><strong>Veiklos Efektyvumas:</strong> Kurios pasikartojančios užduotys yra pilnai automatizuojamos, atlaisvinant komandos laiką strateginiams darbams.</li>
        <li><strong>Strateginiai Sprendimai:</strong> Kaip didžiųjų duomenų (Big Data) analizė leidžia priimti tikslesnius ir greitesnius sprendimus.</li>
        <li><strong>Saugumas:</strong> Kaip AI padeda apsisaugoti nuo nuolat augančių kibernetinių grėsmių.</li>
        <li><strong>Inovacijos:</strong> Kaip AI tampa naujų produktų ir paslaugų kūrimo katalizatoriumi.</li>
      </ul>`,
    "Dirbtinis intelektas: ar Jūsų verslas pasiruošęs ateities revoliucijai?": `
      <p>Dirbtinio intelekto revoliucija jau vyksta, ir ji nelaukia tų, kurie dvejoja. Įmonės, kurios šiandien nediegia AI, rizikuoja ne tik prarasti konkurencinį pranašumą, bet ir apskritai išnykti iš rinkos. Tačiau ar jūsų verslas yra <strong>tikrai pasiruošęs</strong>?</p>
      <p>Sėkminga integracija – tai daugiau nei technologijų pirkimas. Tai – strateginis pokytis, apimantis visą organizaciją. Svarbiausi pasiruošimo žingsniai:</p>
      <ul>
        <li><strong>Strategijos Apsibrėžimas:</strong> Aiškiai įvardinkite, kurias problemas spręsite su AI ir kokio rezultato tikitės.</li>
        <li><strong>Duomenų Kultūra:</strong> Užtikrinkite, kad jūsų duomenys yra kokybiški, prieinami ir paruošti analizei.</li>
        <li><strong>Komandos Kompetencijos:</strong> Investuokite į darbuotojų mokymus ir naujų įgūdžių ugdymą.</li>
        <li><strong>Etiškas Naudojimas:</strong> Nusistatykite aiškias ribas ir principus, kaip AI bus naudojamas jūsų veikloje.</li>
      </ul>`,
    "Praktinis gidas: Kaip pritaikyti AI sprendimus smulkiam verslui?": `
      <p>Egzistuoja klaidingas įsitikinimas, kad <strong>dirbtinis intelektas</strong> yra prabangos prekė, prieinama tik technologijų gigantams. Tiesa yra visiškai kitokia: šiandien egzistuoja daugybė prieinamų ir net nemokamų AI įrankių, galinčių suteikti milžinišką postūmį smulkiam verslui.</p>
      <p>Šis praktinis gidas padės jums pradėti be didelių investicijų. Aptarsime konkrečius, lengvai pritaikomus įrankius:</p>
      <ul>
        <li><strong>Klientų Aptarnavimas:</strong> Kaip įsidiegti išmanų pokalbių robotą (chatbot), kuris dirbs 24/7.</li>
        <li><strong>Rinkodara:</strong> Įrankiai, kurie padės generuoti soc. tinklų įrašus, rašyti el. laiškus ir kurti vizualus.</li>
        <li><strong>Pardavimai:</strong> Sistemos, padedančios automatiškai identifikuoti potencialius klientus (leads).</li>
        <li><strong>Efektyvumas:</strong> Kaip automatizuoti sąskaitų išrašymą, duomenų suvedimą ir kitas administracines užduotis.</li>
      </ul>`,
    "Efektyvumo didinimas su AI: realūs pavyzdžiai ir sėkmės strategijos": `
      <p>Didžiausia, apčiuopiamiausia AI nauda – <strong>veiklos efektyvumo didinimas</strong>. Tačiau kaip tai atrodo realybėje? Vietoj teorijos, panagrinėkime konkrečius pavyzdžius iš skirtingų industrijų, kur AI jau šiandien taupo tūkstančius valandų ir eurų.</p>
      <p>Sėkmės paslaptis slypi ne technologijoje, o jos taikymo strategijoje. Sėkmingos įmonės laikosi šių principų:</p>
      <ul>
        <li><strong>Identifikuoja "Butelio Kakliukus":</strong> Pirmiausia automatizuoja tuos procesus, kurie reikalauja daugiausiai rankinio darbo ir stabdo augimą.</li>
        <li><strong>Pradeda nuo Mažų Žingsnių:</strong> Įgyvendina pilotinius projektus, kad įvertintų naudą prieš diegiant sprendimus visoje organizacijoje.</li>
        <li><strong>Matuoja Viską:</strong> Nustato aiškius rodiklius (KPIs) ir nuolat stebi, kaip AI sprendimai veikia pelningumą.</li>
        <li><strong>Įtraukia Komandą:</strong> Užtikrina, kad darbuotojai suprastų pokyčių naudą ir būtų jų dalimi.</li>
      </ul>`,
    "Dirbtinio intelekto ateitis: prognozės ir galimybės, kurių negalima ignoruoti": `
      <p>Jei dabartinė AI banga atrodo įspūdingai, tai ateitis – tiesiog stulbinanti. Technologijos tobulėja eksponentiniu greičiu, atverdamos galimybes, kurios dar vakar atrodė kaip mokslinė fantastika. Verslo lyderiams, ignoruojantiems šias tendencijas, gresia didelis atsilikimas.</p>
      <p>Šiame straipsnyje aptarsime <strong>keturias pagrindines kryptis</strong>, kurios lems verslo ateitį artimiausią dešimtmetį:</p>
      <ul>
        <li><strong>Generatyvinis AI:</strong> Ne tik tekstas ar vaizdai, bet ir sudėtingi kodai, strategijos bei produktų dizainai, kuriami AI.</li>
        <li><strong>Hiper-automatizavimas:</strong> Pilnai autonominės sistemos, valdančios ištisus verslo procesus be žmogaus įsikišimo.</li>
        <li><strong>AI ir Žmogaus Sinergija:</strong> Nauji bendradarbiavimo modeliai, kur AI veikia kaip asmeninis asistentas kiekvienam darbuotojui.</li>
        <li><strong>Paaiškinamas AI (XAI):</strong> Sistemos, kurios ne tik pateikia atsakymą, bet ir geba logiškai pagrįsti, kodėl priėmė būtent tokį sprendimą.</li>
      </ul>`,
  }
};

const demoDataSecond = {
  topic: "Kaip publikuota.lt padės jūsų verslui",
  url: "https://mano-verslas.lt", // <<< PRIDĖTI
  titles: [
      "Verslo augimas su Publikuota.lt: 3 pagrindinės naudos",
      "Kaip Publikuota.lt automatizuoja jūsų turinio rinkodarą?",
      "Sėkmės istorija: Kaip padidinome srautą 300% su Publikuota.lt",
      "Nuo idėjos iki publikacijos per kelias minutes: Publikuota.lt galia",
      "Investicija, kuri atsiperka: Kodėl verta rinktis Publikuota.lt?"
  ],
  keywords: ["publikuota.lt", "turinio rinkodara", "SEO straipsniai", "automatizavimas", "verslo augimas", "skaitmeninė rinkodara", "atgalinės nuorodos", "naujienų portalai"],
  imageIdentifier: "kaip-publikuota-pades",
  // <<< NAUJA: Kiekvienam pavadinimui - atskira ištrauka >>>
  snippets: {
    "Verslo augimas su Publikuota.lt: 3 pagrindinės naudos": `
      <p>Verslo augimas – tai ne atsitiktinumas, o strategijos rezultatas. <strong>Publikuota.lt</strong> siūlo aiškią ir patikrintą strategiją, paremtą trimis pamatinėmis naudomis, kurios tiesiogiai didina jūsų matomumą ir pajamas.</p>
      <p>Užuot investavę į brangią ir ne visada atsiperkančią reklamą, jūs investuojate į ilgalaikį turtą – savo prekės ženklo autoritetą. Štai kaip tai veikia:</p>
      <ul>
        <li><strong>Organinis Srautas:</strong> Kiekviena publikacija su atgaline nuoroda yra tarsi naujas kelias, vedantis klientus tiesiai į jūsų svetainę iš paieškos sistemų.</li>
        <li><strong>Prekės Ženklo Patikimumas:</strong> Straipsniai žinomuose portaluose veikia kaip trečiosios šalies patvirtinimas, keliantis jūsų įmonės reputaciją klientų akyse.</li>
        <li><strong>Tikslinė Auditorija:</strong> Galimybė rinktis nišinius portalus leidžia pasiekti būtent tuos žmones, kurie jau domisi jūsų paslaugomis ar produktais.</li>
      </ul>`,
    "Kaip Publikuota.lt automatizuoja jūsų turinio rinkodarą?": `
      <p>Jūsų komandos laikas yra per brangus, kad jį švaistytumėte monotoniškoms užduotims. <strong>Publikuota.lt</strong> buvo sukurta su viena misija: grąžinti jums laiką, automatizuojant visą turinio publikavimo grandinę.</p>
      <p>Įsivaizduokite procesą be dešimčių el. laiškų, skambučių ir atskirų Excel lentelių. Mūsų platforma tai paverčia realybe:</p>
      <ul>
        <li><strong>Viskas Vienoje Vietoje:</strong> Nuo rašytojo suradimo ir AI pagalbos iki portalo pasirinkimo ir apmokėjimo – viskas vienoje sistemoje.</li>
        <li><strong>Centralizuotas Katalogas:</strong> Momentinė prieiga prie šimtų portalų su aiškiomis kainomis ir SEO metrika. Jokių derybų.</li>
        <li><strong>Automatinis Publikavimas:</strong> Pateikite straipsnį ir stebėkite jo statusą realiu laiku. Jokių "ar jau publikavote?" skambučių.</li>
        <li><strong>Viena Sąskaita:</strong> Pamirškite dešimtis atskirų sąskaitų. Mėnesio pabaigoje gaukite vieną bendrą sąskaitą už visas paslaugas.</li>
      </ul>`,
    "Sėkmės istorija: Kaip padidinome srautą 300% su Publikuota.lt": `
      <p>Teorija yra viena, o realūs rezultatai – visai kas kita. Panagrinėkime konkrečią sėkmės istoriją: kaip e. komercijos įmonė, prekiaujanti sporto prekėmis, per 6 mėnesius su <strong>Publikuota.lt</strong> padidino savo organinį srautą <strong>net 300%</strong>.</p>
      <p>Šis įspūdingas rezultatas nebuvo atsitiktinumas, o tikslingos strategijos vaisius. Konkretūs žingsniai, kuriuos jie atliko:</p>
      <ul>
        <li><strong>Pradinė Analizė:</strong> Atlikta konkurentų atgalinių nuorodų analizė ir identifikuotos pagrindinės temos.</li>
        <li><strong>Tikslinių Portalų Atranka:</strong> Pasirinkti sporto ir sveikos gyvensenos portalai su aukštu domeno autoritetu.</li>
        <li><strong>Nuoseklus Publikavimas:</strong> Kiekvieną savaitę publikuotas vienas išsamus, naudingas straipsnis su nuoroda į tikslinę kategoriją.</li>
        <li><strong>Rezultatų Stebėjimas:</strong> Naudojantis Google Analytics, stebėtas organinio srauto augimas ir konversijos.</li>
      </ul>`,
    "Nuo idėjos iki publikacijos per kelias minutes: Publikuota.lt galia": `
      <p>Tradicinėje rinkodaroje procesas nuo idėjos iki publikacijos gali trukti savaites. Su <strong>Publikuota.lt</strong> mes sutalpiname šį procesą į jūsų kavos pertraukėlę. Tai – didžiausias mūsų platformos privalumas.</p>
      <p>Leiskite mums parodyti, kaip atrodo pagreitintas procesas, kuris leis jums aplenkti konkurentus:</p>
      <ul>
        <li><strong>1 minutė: Idėja ir generavimas.</strong> Įveskite temą ir raktinius žodžius – mūsų AI akimirksniu pasiūlys antraštes ir sugeneruos straipsnio juodraštį.</li>
        <li><strong>2 minutės: Peržiūra ir tobulinimas.</strong> Greitai peržiūrėkite ir, jei reikia, patobulinkite tekstą su mūsų patogiu redaktoriumi.</li>
        <li><strong>1 minutė: Portalo pasirinkimas.</strong> Filtruokite ir išsirinkite tinkamiausią portalą iš mūsų didžiulio katalogo.</li>
        <li><strong>30 sekundžių: Publikavimas.</strong> Vienu mygtuko paspaudimu jūsų straipsnis iškeliauja tiesiai į portalo redakciją.</li>
      </ul>`,
    "Investicija, kuri atsiperka: Kodėl verta rinktis Publikuota.lt?": `
      <p>Protingas verslas kiekvieną investiciją vertina pagal jos grąžą (ROI). <strong>Publikuota.lt</strong> yra ne išlaidos, o viena geriausių investicijų į jūsų ilgalaikį skaitmeninį marketingą.</p>
      <p>Lyginant su kitomis alternatyvomis, mūsų platforma siūlo neprilygstamą vertę. Štai kodėl:</p>
      <ul>
        <li><strong>Efektyvumas:</strong> Jūs sutaupote dešimtis valandų, kurias galite skirti savo tiesioginiam verslui. Laikas – pinigai.</li>
        <li><strong>Kaina:</strong> Mokate tik už konkretų rezultatą – publikaciją. Jokių mėnesinių mokesčių ar ilgalaikių įsipareigojimų.</li>
        <li><strong>Ilgalaikė Vertė:</strong> Skirtingai nei mokama reklama, kuri nustoja veikti vos tik nustojate mokėti, kokybiškas straipsnis su atgaline nuoroda generuoja srautą ir kelia jūsų SEO autoritetą metų metus.</li>
      </ul>`,
  }
};

// --- Pagrindinis komponentas ---
export const InteractiveToolSection = () => {
  const [step, setStep] = useState(1);
  const [topic, setTopic] = useState("");
  const [titles, setTitles] = useState<string[]>([]);
  const [selectedTitle, setSelectedTitle] = useState('');
  const [keywords, setKeywords] = useState<string[]>([]);
  const [snippet, setSnippet] = useState('');
  const [image, setImage] = useState('');
  const [seo, setSeo] = useState<{ metaTitle: string; metaDescription: string; keywords: string[] } | null>(null);
  const [selectedPortals, setSelectedPortals] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isPulsing, setIsPulsing] = useState(false);
  const [url, setUrl] = useState(""); // <<< PRIDĖTI

  // <<< NAUJA BŪSENA GENERACIJAI SEkti >>>
  const [generationCount, setGenerationCount] = useState(1);
  const activeDemoData = generationCount === 1 ? demoDataFirst : demoDataSecond;

  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.5 });
  const [hasStarted, setHasStarted] = useState(false);

const fakePortals = [
  { name: "geranaujiena.lt", DR: 45, price: 50, description: "Lyderiaujantis bendrų naujienų portalas." },
  { name: "infoerdve.lt", DR: 38, price: 65, description: "Technologijų ir inovacijų naujienos." },
  { name: "welovelithuania.lt", DR: 52, price: 200, description: "Populiarus turizmo ir kultūros portalas." },
  { name: "gerosnaujienos.lt", DR: 35, price: 85, description: "Pozityvių naujienų ir bendruomenių svetainė." },
  { name: "kulturosmeniu.lt", DR: 41, price: 75, description: "Specializuotas kultūros ir meno portalas." },
];
  
  useEffect(() => {
    if (isInView && !hasStarted) {
      setHasStarted(true);
      startTyping(demoDataFirst.topic, () => startUrlTyping(demoDataFirst.url));
    }
  }, [isInView, hasStarted]);

  const handleKeywordRemove = (keywordToRemove: string) => {
    setKeywords(keywords.filter(keyword => keyword !== keywordToRemove));
  };

  const startTyping = (text: string, onComplete: () => void) => {
    let i = 0;
    const intervalId = setInterval(() => {
      setTopic(text.slice(0, i + 1));
      i++;
      if (i > text.length) {
        clearInterval(intervalId);
        onComplete(); // <<< IŠKVIESTI CALLBACK
      }
    }, 50);
  };

  const startUrlTyping = (text: string) => {
    let i = 0;
    const intervalId = setInterval(() => {
      setUrl(text.slice(0, i + 1));
      i++;
      if (i > text.length) {
        clearInterval(intervalId);
        setIsPulsing(true);
      }
    }, 50);
  };

  const handleStepLogic = () => {
    setIsLoading(true);
    setIsPulsing(false);
    setTimeout(() => {
      const nextStep = step + 1;
      switch(nextStep) {
        case 2:
          setTitles(activeDemoData.titles);
          break;
        case 3:
          setKeywords(activeDemoData.keywords);
          break;
        case 4:
          setSnippet(
            generationCount === 1
              ? (demoDataFirst.snippets as any)[selectedTitle] || `<p>Klaida: tekstas nerastas.</p>`
              : (demoDataSecond.snippets as any)[selectedTitle] || `<p>Klaida: tekstas nerastas.</p>`
          );
          break;
        case 5:
          setImage(getImageForTopic(activeDemoData.imageIdentifier));
          break;
        case 6:
          setSeo({ metaTitle: `${selectedTitle} | Publikuota.lt`, metaDescription: `Sužinokite viską apie temą "${activeDemoData.topic}". Mūsų platforma padės Jums pasiekti geriausius rezultatus.`, keywords: keywords });
          break;
      }
      setStep(nextStep);
      setIsLoading(false);
    }, 1500 + Math.random() * 500);
  };

const resetDemo = (startNewGeneration = false) => {
  // <<< NAUJA SLINKIMO LOGIKA >>>
  const section = document.getElementById('demo');
  if (section) {
    window.scrollTo({
      top: section.offsetTop - 80, // 80px atsitraukimas nuo viršaus
      behavior: 'smooth',
    });
  }

  if (startNewGeneration) {
    setGenerationCount(2);
    const newTopic = demoDataSecond.topic;
    setTopic('');
    setTitles([]);
    setSelectedTitle('');
    setKeywords([]);
    setSnippet('');
    setImage('');
    setSeo(null);
    setUrl(""); // <<< NEPAMIRŠK IŠVALYTI URL
    setIsPulsing(false);
    setStep(1);
    setTimeout(() => startTyping(newTopic, () => startUrlTyping(demoDataSecond.url)), 500);
  } else {
    setGenerationCount(1);
    const originalTopic = demoDataFirst.topic;
    setTopic('');
    setTitles([]);
    setSelectedTitle('');
    setKeywords([]);
    setSnippet('');
    setImage('');
    setSeo(null);
    setUrl(""); // <<< NEPAMIRŠK IŠVALYTI URL
    setIsPulsing(false);
    setStep(1);
    setTimeout(() => startTyping(originalTopic, () => startUrlTyping(demoDataFirst.url)), 500);
  }
};
  
  const stepVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.4, ease: "easeOut" as any } },
    exit: { opacity: 0, y: -20, transition: { duration: 0.2, ease: "easeIn" as any } },
  };

  return (
    <AnimatedSection id="demo" className="py-20 sm:py-28 bg-gray-50 dark:bg-slate-900">
      <div className="container mx-auto px-4 text-center">
        <h2 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">Pajuskite AI galią. Gyvai.</h2>
        <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">Išbandykite interaktyvią kelionę ir pamatykite, kaip idėja virsta publikacija.</p>
        
        <Card ref={ref} className="mt-10 max-w-3xl mx-auto text-left dark:bg-slate-800/50 p-4 sm:p-6 shadow-2xl transition-all duration-500">
            <div className="flex justify-between items-center mb-4">
                <StepIndicator step={step} totalSteps={7} />
                <Button variant="ghost" size="sm" onClick={() => resetDemo(false)}>Pradėti iš naujo</Button>
            </div>
            
            <AnimatePresence>
                {step >= 1 && (
                    <motion.div key="step1" variants={stepVariants} initial="hidden" animate="visible" exit="exit">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <h3 className="font-semibold text-lg flex items-center mb-2">1. Jūsų tema <InfoTooltip content="Viskas prasideda nuo idėjos. Mūsų AI ją pavers įtraukiančiu turiniu." /></h3>
                          <div className="relative">
                            <FileText className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                            <Input value={topic} readOnly className="bg-gray-100 dark:bg-slate-700 h-12 font-medium pl-10" />
                            {topic.length < activeDemoData.topic.length && <span className="blinking-cursor absolute right-3 top-1/2 -translate-y-1/2 h-6 bg-indigo-500" />}
                          </div>
                        </div>
                        <div>
                          <h3 className="font-semibold text-lg flex items-center mb-2">2. Jūsų nuoroda <InfoTooltip content="Įveskite URL, į kurį norite gauti atgalinę nuorodą iš straipsnio." /></h3>
                          <div className="relative">
                            <LinkIcon className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                            <Input value={url} readOnly className="bg-gray-100 dark:bg-slate-700 h-12 font-medium pl-10" />
                            {topic.length >= activeDemoData.topic.length && url.length < activeDemoData.url.length && <span className="blinking-cursor absolute right-3 top-1/2 -translate-y-1/2 h-6 bg-indigo-500" />}
                          </div>
                        </div>
                      </div>

                      {step === 1 && (
                          <div className="mt-6">
                              <Button size="lg" onClick={handleStepLogic} disabled={isLoading || url.length < activeDemoData.url.length} className={isPulsing ? 'animate-button-pulse' : ''}>
                                  {isLoading ? "Generuojama..." : "Generuoti Pavadinimus"}
                              </Button>
                          </div>
                      )}
                    </motion.div>
                )}

                {step >= 2 && (
                    <motion.div key="step2" variants={stepVariants} initial="hidden" animate="visible" exit="exit" className="mt-6">
                        <h3 className="font-semibold text-lg flex items-center">2. Pavadinimo pasirinkimas <InfoTooltip content="Geras pavadinimas pritraukia daugiau skaitytojų. Pasirinkite vieną iš AI sugeneruotų variantų." /></h3>
                        <div className="my-4 space-y-2">
                            {isLoading && step === 2 ? Array(5).fill(0).map((_,i) => <div key={i} className="h-12 w-full rounded-md shimmer-bg" />) :
                            titles.map(title => <Button key={title} variant={selectedTitle === title ? 'default' : 'outline'} onClick={() => setSelectedTitle(title)} className="w-full justify-start text-left h-auto whitespace-normal p-3"><Check className={`mr-2 h-4 w-4 transition-opacity ${selectedTitle === title ? 'opacity-100' : 'opacity-0'}`} />{title}</Button>)}
                        </div>
                        {step === 2 && (
                            <Button size="lg" onClick={handleStepLogic} disabled={!selectedTitle || isLoading}>{isLoading ? "..." : "Generuoti Raktinius Žodžius"}</Button>
                        )}
                    </motion.div>
                )}
                
                {step >= 3 && (
                    <motion.div key="step3-keywords" variants={stepVariants} initial="hidden" animate="visible" exit="exit" className="mt-6">
                        <h3 className="font-semibold text-lg flex items-center">3. Raktinių žodžių generavimas <InfoTooltip content="Tinkami raktiniai žodžiai padeda Jūsų straipsniui pasiekti aukštesnes pozicijas paieškos sistemose." /></h3>
                        {keywords.length > 0 && (
                            <div className="my-4 flex flex-wrap gap-2 p-3 border rounded-md min-h-[50px]">
                              <AnimatePresence>
                                {keywords.map(k => (
                                  <motion.div
                                    key={k}
                                    layout
                                    initial={{ opacity: 0, scale: 0.5 }}
                                    animate={{ opacity: 1, scale: 1 }}
                                    exit={{ opacity: 0, scale: 0.5, transition: { duration: 0.2 } }}
                                  >
                                    <Badge variant="secondary" className="flex items-center gap-2 py-1 px-3">
                                      {k}
                                      <button onClick={() => handleKeywordRemove(k)} className="rounded-full hover:bg-black/10 dark:hover:bg-white/10 p-0.5">
                                        <X className="h-3 w-3" />
                                      </button>
                                    </Badge>
                                  </motion.div>
                                ))}
                              </AnimatePresence>
                            </div>
                        )}
                        {step === 3 && (
                             <Button size="lg" onClick={handleStepLogic} disabled={isLoading}>{isLoading ? "Generuojama..." : "Kurti Turinį"}</Button>
                        )}
                    </motion.div>
                )}

                {step >= 4 && (
                    <motion.div key="step4-content" variants={stepVariants} initial="hidden" animate="visible" exit="exit" className="mt-6">
                        <p className="text-sm font-medium text-muted-foreground">Pasirinktas pavadinimas:</p>
                        <h3 className="font-semibold text-lg mb-4">{selectedTitle}</h3>

                        {step >= 5 && (
                            <motion.div key="step5-image" variants={stepVariants} initial="hidden" animate="visible" exit="exit" className="w-full aspect-video bg-slate-200 dark:bg-slate-800 rounded-lg flex items-center justify-center overflow-hidden relative my-4">
                                {image && <img src={image} className="w-full h-full object-cover"/>}
                            </motion.div>
                        )}
                        
                        <div className="prose prose-sm dark:prose-invert max-w-none p-4 border rounded-md" dangerouslySetInnerHTML={{ __html: snippet }} />

                        {step >= 6 && (
                             <motion.div key="step6-seo" variants={stepVariants} initial="hidden" animate="visible" exit="exit" className="space-y-3 p-3 border rounded-md mt-4">
                                <p className="text-xs font-semibold uppercase text-muted-foreground">Meta Title</p>
                                <p className="font-mono text-sm">{seo?.metaTitle}</p>
                                <p className="text-xs font-semibold uppercase text-muted-foreground">Meta Description</p>
                                <p className="text-sm">{seo?.metaDescription}</p>
                                <div className="flex flex-wrap gap-2 pt-2">{seo?.keywords.map(k => <Badge key={k} variant="secondary">{k}</Badge>)}</div>
                             </motion.div>
                        )}

                        {step === 4 && (<Button size="lg" onClick={handleStepLogic} disabled={isLoading} className="mt-4">{isLoading ? "..." : "Generuoti Paveikslėlį"}</Button>)}
                        {step === 5 && (<Button size="lg" onClick={handleStepLogic} disabled={isLoading} className="mt-4">{isLoading ? "..." : "Sukurti SEO"}</Button>)}
                        {step === 6 && (<Button size="lg" onClick={handleStepLogic} disabled={isLoading} className="mt-4">{isLoading ? "..." : "Ruošti Publikavimui"}</Button>)}
                    </motion.div>
                )}

                {step === 7 && (
                    <motion.div key="step7-publish" variants={stepVariants} initial="hidden" animate="visible" exit="exit" className="mt-6">
                      <h3 className="font-semibold text-lg flex items-center">7. Pasirinkite portalus <InfoTooltip content="Užveskite pelę ant portalo, kad pamatytumėte SEO metriką ir kainą." /></h3>
                      <p className="text-sm text-muted-foreground mb-4">Realiame produkte matysite šimtus portalų su detaliais duomenimis.</p>
                      
                      {/* Portalų Tinklelis su Tooltip'ais */}
                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                        {fakePortals.map(portal => (
                          <TooltipProvider key={portal.name}>
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <div 
                                  className={`flex items-center gap-3 p-3 border rounded-lg cursor-pointer transition-colors ${selectedPortals.includes(portal.name) ? 'bg-indigo-100 dark:bg-indigo-900 border-indigo-300 ring-2 ring-indigo-400' : 'hover:bg-gray-100 dark:hover:bg-slate-700'}`} 
                                  onClick={() => {
                                    const isSelected = selectedPortals.includes(portal.name);
                                    setSelectedPortals(isSelected ? selectedPortals.filter(p => p !== portal.name) : [...selectedPortals, portal.name]);
                                  }}
                                >
                                   <LinkIcon className="h-5 w-5 text-gray-500"/>
                                   <span className="font-medium">{portal.name}</span>
                                   <Check className={`ml-auto h-5 w-5 text-indigo-600 transition-opacity ${selectedPortals.includes(portal.name) ? 'opacity-100' : 'opacity-0'}`} />
                                </div>
                              </TooltipTrigger>
                              <TooltipContent>
                                <div className="p-1 text-sm">
                                  <p className="font-bold">{portal.description}</p>
                                  <p className="mt-2">Domeno Autoritetas (DA): <strong className="text-indigo-500">{portal.DR}</strong></p>
                                  <p>Publikacijos kaina: <strong className="text-indigo-500">{portal.price} €</strong></p>
                                </div>
                              </TooltipContent>
                            </Tooltip>
                          </TooltipProvider>
                        ))}
                      </div>

                      {/* Dinaminė Santrauka ir CTA Mygtukas */}
                      <div className="mt-8 pt-6 border-t">
                        <h4 className="font-semibold text-center mb-4">Jūsų pasirinkimas:</h4>
                        {selectedPortals.length > 0 ? (
                          <div className="space-y-4">
                            <div className="flex justify-between items-center text-lg font-bold">
                              <span>Bendra suma:</span>
                              <span>
                                {selectedPortals.reduce((total, currentPortalName) => {
                                  const portal = fakePortals.find(p => p.name === currentPortalName);
                                  return total + (portal ? portal.price : 0);
                                }, 0)} €
                              </span>
                            </div>
                            <Button asChild size="lg" className="w-full bg-green-600 hover:bg-green-700 text-base py-6 px-8 animate-pulse">
                                <Link href="https://portal.publikuota.lt/lt/signup"><Star className="mr-2 h-5 w-5"/>Publikuoti Nemokamai</Link>
                            </Button>
                          </div>
                        ) : (
                          <p className="text-center text-muted-foreground">Pasirinkite bent vieną portalą.</p>
                        )}
                      </div>

                      {/* Mygtukas "Generuoti naują" */}
                      {generationCount === 1 && (
                          <div className="mt-8 pt-6 border-t text-center">
                              <p className="text-sm text-muted-foreground mb-3">Nepatiko straipsnis?</p>
                              <Button variant="secondary" onClick={() => resetDemo(true)}>
                                  <RefreshCw className="mr-2 h-4 w-4"/>
                                  Generuoti naują
                              </Button>
                          </div>
                      )}
                    </motion.div>
                )}
            </AnimatePresence>
        </Card>
      </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\PartnersSection.tsx ---
// src/components/homepage/PartnersSection.tsx
import { AnimatedSection } from "./AnimatedSection";
import Image from 'next/image';
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "src/components/ui/carousel";

// <<< IŠPLĖSTAS PARTNERIŲ SĄRAŠAS >>>
// Pastaba: Jums reikės sukurti failus placeholder-logo-6.svg ir t.t.
const partners = [
  { name: 'Partner 1', logo: '/logos/placeholder-logo-1.svg' },
  { name: 'Partner 2', logo: '/logos/placeholder-logo-2.svg' },
  { name: 'Partner 3', logo: '/logos/placeholder-logo-3.svg' },
  { name: 'Partner 4', logo: '/logos/placeholder-logo-4.svg' },
  { name: 'Partner 5', logo: '/logos/placeholder-logo-5.svg' },
  { name: 'Partner 6', logo: '/logos/placeholder-logo-6.svg' },
];

export const PartnersSection = () => {
  return (
    <AnimatedSection className="py-20 sm:py-28 bg-white dark:bg-slate-950">
      <div className="container mx-auto px-4">
        <h2 className="text-center text-lg font-semibold leading-8 text-gray-900 dark:text-white mb-10">
          Mumis pasitiki inovatyviausios Lietuvos įmonės
        </h2>
        
        {/* <<< NAUJA KARUSELĖS STRUKTŪRA >>> */}
        <Carousel
          opts={{
            align: "start",
            loop: true,
          }}
          className="w-full max-w-4xl mx-auto"
        >
          <CarouselContent className="-ml-8">
            {partners.map((partner, index) => (
              <CarouselItem key={index} className="pl-8 basis-full md:basis-1/2 lg:basis-1/3">
                <div className="flex items-center justify-center h-24 p-4 bg-gray-50 dark:bg-slate-800/50 rounded-lg">
                  <Image
                    className="max-h-12 w-full object-contain dark:invert"
                    src={partner.logo}
                    alt={partner.name}
                    width={158}
                    height={48}
                  />
                </div>
              </CarouselItem>
            ))}
          </CarouselContent>
          <CarouselPrevious className="hidden sm:inline-flex" />
          <CarouselNext className="hidden sm:inline-flex" />
        </Carousel>

      </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\PricingSection.tsx ---
// src/components/homepage/PricingSection.tsx
import { AnimatedSection } from "./AnimatedSection";
import { Button } from "src/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "src/components/ui/card";
import { Check } from "lucide-react";
import Link from "next/link";
import { HeroParticles } from "./effects/HeroParticles";

const plans = [
  {
    name: "Nemokamas",
    price: "0 €",
    description: "Išbandykite platformos pagrindines funkcijas visiškai nemokamai.",
    features: [
      "1 nemokamas AI straipsnis",
      "5 nemokamos publikacijos",
      "Prieiga prie standartinių portalų",
      "Palaikymas el. paštu",
    ],
    popular: false,
  },
  {
    name: "Verslui",
    price: "Nuo 50 €",
    description: "Populiariausias pasirinkimas verslo augimui ir matomumui.",
    features: [
      "Visos nemokamo plano galimybės ir:",
      "Prieiga prie premium portalų",
      "„Public Releases“ funkcija",
      "Prioritetinis palaikymas",
      "Mėnesio ataskaitos",
    ],
    popular: true,
  },
  {
    name: "Agentūra",
    price: "Susisiekite",
    description: "Individualūs sprendimai didelėms apimtims ir agentūroms.",
    features: [
      "Viskas, kas yra Verslui plane",
      "Baltos etiketės (white-label) sprendimai",
      "API prieiga",
      "Asmeninis vadybininkas",
      "Individualūs apmokymai",
    ],
    popular: false,
  },
];

export const PricingSection = () => {
  return (
<AnimatedSection id="pricing" className="py-20 sm:py-28 animated-gradient-bg relative overflow-hidden">
      <HeroParticles id="pricing-particles" />
      <div className="relative z-10">
        <div className="container mx-auto px-4">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-bold tracking-tight text-white sm:text-4xl">
              Kainodara, kuri prisitaiko prie jūsų
            </h2>
            <p className="mt-4 max-w-2xl mx-auto text-lg text-gray-300">
              Mokėkite tik už tai, ką naudojate. Jokių mėnesinių įsipareigojimų ar paslėptų mokesčių.
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 max-w-5xl mx-auto">
            {plans.map((plan) => (
              <Card
                key={plan.name}
                className={`flex flex-col ${plan.popular ? 'border-2 border-indigo-600 dark:border-indigo-500 shadow-2xl' : 'dark:bg-slate-800/50'}`}
              >
                {plan.popular && (
                  <div className="bg-indigo-600 text-white text-sm font-semibold text-center py-1.5 rounded-t-lg">
                    Populiariausias
                  </div>
                )}
                <CardHeader className="pt-8">
                  <CardTitle className="text-2xl font-bold text-gray-900 dark:text-white">{plan.name}</CardTitle>
                  <CardDescription>{plan.description}</CardDescription>
                </CardHeader>
                <CardContent className="flex-grow">
                  <div className="mb-6">
                    <span className="text-4xl font-extrabold text-gray-900 dark:text-white">{plan.price}</span>
                    {plan.price.includes("€") && plan.price !== "0 €" && <span className="text-muted-foreground"> / publikacija</span>}
                  </div>
                  <ul className="space-y-4">
                    {plan.features.map((feature) => (
                      <li key={feature} className="flex items-start">
                        <Check className="h-5 w-5 text-green-500 mr-3 flex-shrink-0 mt-1" />
                        <span className="text-muted-foreground">{feature}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
                <CardFooter>
<Button asChild size="lg" className={`w-full ${plan.popular ? 'bg-indigo-600 hover:bg-indigo-700 animate-button-pulse' : ''}`}>
                    <Link href="https://portal.publikuota.lt/lt/signup">
                      {plan.name === "Agentūra" ? "Susisiekti" : plan.name === "Nemokamas" ? "Registruotis nemokamai" : "Pradėti dabar"}
                    </Link>
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\PublicReleasesSection.tsx ---
// src/components/homepage/PublicReleasesSection.tsx
import { AnimatedSection } from "./AnimatedSection";
import { ShoppingBag, BookOpen } from "lucide-react";

export const PublicReleasesSection = () => {
  return (
    <AnimatedSection className="py-20 sm:py-28 bg-white dark:bg-slate-950">
      <div className="container mx-auto px-4">
        <div className="text-center">
          <h2 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
            Atraskite Turinio „Vitriną“
          </h2>
          <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
            Unikali funkcija, sujungianti turinio kūrėjus ir leidėjus kaip niekad anksčiau.
          </p>
        </div>
        <div className="mt-16 grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
          <div className="text-center md:text-left">
            <div className="inline-flex items-center gap-3">
                <div className="bg-blue-100 dark:bg-blue-900/50 p-2 rounded-md">
                    <ShoppingBag className="h-6 w-6 text-blue-600 dark:text-blue-400"/>
                </div>
                <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
                    Pirkėjams: Išplėskite Savo Pasiekiamumą
                </h3>
            </div>
            <p className="mt-4 text-muted-foreground">
                Sukurkite aukštos kokybės straipsnį ir pasiūlykite jį visai leidėjų bendruomenei. Leiskite jiems patiems pasirinkti jūsų turinį ir pasiekite dar platesnę, motyvuotą auditoriją be papildomų pastangų.
            </p>
          </div>
          <div className="text-center md:text-left">
             <div className="inline-flex items-center gap-3">
                <div className="bg-purple-100 dark:bg-purple-900/50 p-2 rounded-md">
                    <BookOpen className="h-6 w-6 text-purple-600 dark:text-purple-400"/>
                </div>
                <h3 className="text-xl font-semibold text-gray-900 dark:text-white">
                    Leidėjams: Užpildykite Savo Portalą
                </h3>
             </div>
            <p className="mt-4 text-muted-foreground">
                Trūksta kokybiško turinio jūsų portalui? Naršykite laisvai prieinamų straipsnių sąrašą ir publikuokite juos nemokamai arba už simbolinę premiją. Tai puikus būdas praturtinti savo turinį ir sudominti skaitytojus.
            </p>
          </div>
        </div>
      </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\ServicesSection.tsx ---
"use client";

import Image from "next/image";
import { Newspaper, Send, UserCheck, Building, PenSquare } from "lucide-react";
import { motion } from "framer-motion";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "src/components/ui/accordion";
import { AnimatedSection } from "./AnimatedSection";

const servicesData = [
  {
    icon: <Newspaper className="h-8 w-8 text-white" />,
    title: "Publikuoti naujieną",
    subtitle: "Naujos kartos naujienų agentūra su didžiausiu regioninių portalų tinklu.",
    description: "Publikuota.lt – tai moderni naujienų sklaidos platforma, kuri leidžia jūsų pranešimą paskleisti visoje Lietuvoje vos per kelias minutes. Mūsų stiprybė – didžiausias regioninių naujienų portalų tinklas, suteikiantis galimybę pasiekti plačią, įvairią ir geografiškai išskaidytą auditoriją.",
    imageUrl: "https://images.unsplash.com/photo-1451187580459-43490279c0fa?q=80&w=2072&auto=format&fit=crop",
    whyPoints: [
      "Didžiausias regioninės žiniasklaidos portalų tinklas Lietuvoje.",
      "Momentinis naujienos paskleidimas – jūsų žinutė auditoriją pasiekia tą pačią dieną.",
      "Vienu paspaudimu publikuojamas turinys redakcijose.",
      "Patogu, greita ir skaidru – jūs valdote visą procesą nuo įkėlimo iki publikacijos.",
    ],
    howPoints: [
      "Įkelkite naujieną ar pranešimą spaudai.",
      "Ji tampa matoma regioniniams portalams.",
      "Redaktoriai ją patalpina vos vienu paspaudimu.",
    ],
  },
  {
    icon: <Send className="h-8 w-8 text-white" />,
    title: "Užsisakyti straipsnį",
    subtitle: "Tiesioginis kelias į jūsų pasirinktą portalą.",
    description: "Su Publikuota.lt galite užsisakyti straipsnį ir iškart jį paskelbti norimame portale – be jokių tarpininkų. Tai paprasčiausias būdas užtikrinti, kad jūsų žinutė būtų matoma būtent ten, kur ją pastebės jūsų tikslinė auditorija.",
    imageUrl: "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?q=80&w=2071&auto=format&fit=crop",
    whyPoints: [
      "Galimybė tiesiogiai įsigyti publikaciją pasirinktuose portaluose.",
      "Profesionaliai parengtas tekstas pagal jūsų tikslus.",
      "Matomumas būtent toje erdvėje, kur lankosi jūsų auditorija.",
      "Aiškus procesas ir skaidri kaina.",
    ],
    howPoints: [
      "Pasirinkite portalą, kuriame norite publikuoti straipsnį.",
      "Pateikite temą ir pagrindinę informaciją.",
      "Mūsų komanda parengia straipsnį ir suderina jį su redakcija.",
      "Straipsnis publikuojamas pasirinktoje žiniasklaidos priemonėje.",
    ],
  },
  {
    icon: <UserCheck className="h-8 w-8 text-white" />,
    title: "Tapti media partneriu",
    subtitle: "Uždirbkite iš kiekvienos publikacijos.",
    description: "Publikuota.lt jungia verslus, organizacijas ir žiniasklaidą. Tapę mūsų partneriu, įtraukiate savo portalą į didžiausią žiniasklaidos tinklą Lietuvoje ir gaunate tiesioginius užsakymus publikacijoms.",
    imageUrl: "https://images.unsplash.com/photo-1520607162513-77705c0f0d4a?q=80&w=2069&auto=format&fit=crop",
    whyPoints: [
      "Papildomos pajamos už kiekvieną paskelbtą straipsnį.",
      "Tiesioginis ryšys su užsakovais.",
      "Galimybė užpildyti turinio kalendorių kokybišku turiniu.",
      "Paprastas ir aiškus valdymas vienoje sistemoje.",
    ],
    howPoints: [
      "Užsiregistruokite kaip Publikuota.lt partneris.",
      "Nurodykite savo portalo tematiką, kainas ir publikavimo sąlygas.",
      "Gaukite užsakymus ir patvirtinkite norimą turinį.",
      "Publikuokite straipsnius ir gaukite užmokestį.",
    ],
  },
  {
    icon: <PenSquare className="h-8 w-8 text-white" />,
    title: "Tapti rašytoju",
    subtitle: "Monetizuokite savo rašymo įgūdžius.",
    description: "Esate talentingas rašytojas, turinio kūrėjas ar SEO specialistas? Prisijunkite prie mūsų kūrėjų bendruomenės ir gaukite užsakymus straipsnių rašymui. Rinkitės temas, kurios jums patinka, ir uždirbkite iš savo talento.",
    imageUrl: "https://images.unsplash.com/photo-1455390582262-044cdead277a?q=80&w=1973&auto=format&fit=crop",
    whyPoints: [
      "Gaukite nuolatinius užsakymus iš įvairių klientų.",
      "Lankstus darbo grafikas ir laisvė rinktis temas.",
      "Skaidrus ir greitas atsiskaitymas už atliktą darbą.",
      "Kelkite savo, kaip autoriaus, reputaciją.",
    ],
    howPoints: [
        "Užsiregistruokite kaip rašytojas ir sukurkite savo portfolio.",
        "Gaukite pranešimus apie naujus straipsnių užsakymus.",
        "Pateikite savo paraišką ir, ją patvirtinus, parašykite straipsnį.",
        "Gaukite atlygį iškart po straipsnio patvirtinimo.",
    ],
  },
];

const cardVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: {
        delay: i * 0.2,
        duration: 0.6,
        ease: "easeOut" as any
      }
    })
};

export const ServicesSection = () => {
    return (
        <AnimatedSection className="py-20 sm:py-28 bg-gray-50 dark:bg-slate-900">
            <div className="container mx-auto px-4">
                <div className="text-center mb-16">
                    <h2 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
                        Viena platforma, kuri sujungia
                    </h2>
                    <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
                        Atraskite, kaip galime padėti pasiekti jūsų tikslus, nesvarbu, kas esate – verslas, agentūra ar leidėjas.
                    </p>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    {servicesData.map((service, index) => (
                        <motion.div
                            key={service.title}
                            custom={index}
                            variants={cardVariants}
                            initial="hidden"
                            whileInView="visible"
                            viewport={{ once: true, amount: 0.3 }}
                            className="relative rounded-2xl overflow-hidden shadow-2xl group transition-transform duration-300 ease-in-out hover:scale-105"
                        >
                            <Image
                                src={service.imageUrl}
                                alt={service.title}
                                fill
                                className="object-cover transition-transform duration-500 group-hover:scale-110"
                            />
                            <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent" />
                            <div className="relative z-10 p-8 flex flex-col h-full text-white">
                                <div className="flex items-center gap-4 mb-4">
                                    <div className="bg-white/10 p-3 rounded-lg">
                                        {service.icon}
                                    </div>
                                    <div>
                                        <h3 className="text-2xl font-bold">{service.title}</h3>
                                        <p className="text-sm text-white/80">{service.subtitle}</p>
                                    </div>
                                </div>
                                <p className="text-white/90 flex-grow mb-6">{service.description}</p>
                                
                                <Accordion type="single" collapsible className="w-full">
                                    <AccordionItem value="item-1" className="border-white/20">
                                        <AccordionTrigger className="hover:no-underline font-semibold">Kodėl verta?</AccordionTrigger>
                                        <AccordionContent>
                                            <ul className="list-disc pl-5 space-y-2 text-white/80">
                                                {service.whyPoints.map(point => <li key={point}>{point}</li>)}
                                            </ul>
                                        </AccordionContent>
                                    </AccordionItem>
                                    <AccordionItem value="item-2" className="border-b-0 border-white/20">
                                        <AccordionTrigger className="hover:no-underline font-semibold">Kaip tai veikia?</AccordionTrigger>
                                        <AccordionContent>
                                            <ul className="list-disc pl-5 space-y-2 text-white/80">
                                                {service.howPoints.map(point => <li key={point}>{point}</li>)}
                                            </ul>
                                        </AccordionContent>
                                    </AccordionItem>
                                </Accordion>
                            </div>
                        </motion.div>
                    ))}
                </div>
            </div>
        </AnimatedSection>
    );
};


--- FILE: .\src\components\homepage\SocialProofSection.tsx ---
// src/components/homepage/SocialProofSection.tsx
"use client";
import { Card, CardContent } from "src/components/ui/card";
import { AnimatedSection } from "./AnimatedSection";
import Image from "next/image";
import { Star, Quote, User, UserRound } from "lucide-react";

// <<< Importuojame reikiamus karuselės komponentus >>>
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "src/components/ui/carousel";

const testimonials = [
  {
    quote: "„Publikuota.lt“ visiškai pakeitė mūsų turinio rinkodaros strategiją. Sutaupėme dešimtis valandų, o rezultatai viršijo lūkesčius. DI asistentas yra tiesiog neįtikėtinas!",
    name: "Jonas Petrauskas",
    title: "Rinkodaros vadovas, UAB „Tech Inovacijos“",
    rating: 5,
    gender: "male",
  },
  {
    quote: "Kaip portalo savininkas, nuolat ieškau kokybiško turinio. Ši platforma man leido ne tik lengvai užpildyti turinio spragas, bet ir uždirbti papildomai. Rekomenduoju!",
    name: "Ona Jonaitiene",
    title: "Tinklaraščio „Sveika Gyvensena“ autorė",
    rating: 5,
    gender: "female",
  },
  {
    quote: "Anksčiau atgalinių nuorodų gavimas buvo tikras galvos skausmas. Dabar tai vos kelių mygtukų paspaudimo procesas. Mūsų domeno autoritetas auga kaip ant mielių.",
    name: "Andrius Kazlauskas",
    title: "SEO specialistas, „Marketingo Galia“",
    rating: 5,
    gender: "male",
  },
  {
    quote: "Neįsivaizduoju, kaip galėčiau grįžti prie senojo darbo būdo. Platforma sutaupo ne tik laiką, bet ir pinigus. Klientų aptarnavimas taip pat puikus!",
    name: "Laura Vaitkute",
    title: "Smulkaus verslo savininkė",
    rating: 5,
    gender: "female",
  },
  {
    quote: "Platformos analitika padėjo mums suprasti, koks turinys veikia geriausiai. Tai ne tik publikavimo, bet ir strategijos įrankis.",
    name: "Tomas Vėlius",
    title: "Duomenų Analitikas",
    rating: 5,
    gender: "male",
  },
];

const StarRating = ({ rating, className }: { rating: number, className?: string }) => (
  <div className={`flex items-center gap-0.5 ${className}`}>
    {Array.from({ length: 5 }).map((_, index) => (
      <Star
        key={index}
        className={`h-5 w-5 ${index < rating ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300 dark:text-gray-600'}`}
      />
    ))}
  </div>
);

export const SocialProofSection = () => {
  return (
    <AnimatedSection id="testimonials" className="py-20 sm:py-28 bg-gray-50 dark:bg-slate-900">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
            Kuo Pasitiki Rinka
          </h2>
          <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
            Išgirskite, ką apie mus sako mūsų klientai ir partneriai.
          </p>
        </div>
        
        {/* <<< Nauja karuselės struktūra >>> */}
        <Carousel
          opts={{
            align: "start",
            loop: true, // Įjungiame ciklinį slinkimą
          }}
          className="w-full max-w-6xl mx-auto"
        >
          <CarouselContent className="-ml-4">
            {testimonials.map((testimonial, index) => (
              // <<< Nurodome responsyvų kortelių dydį >>>
              <CarouselItem key={index} className="pl-4 basis-full md:basis-1/2 lg:basis-1/3">
                <div className="p-1 h-full">
                  <Card className="relative dark:bg-slate-800 shadow-xl overflow-hidden flex flex-col h-full">
                    <Quote className="absolute -top-4 -left-4 h-32 w-32 text-gray-100 dark:text-slate-700/50 opacity-50" />
                    <CardContent className="relative p-8 flex flex-col flex-grow">
                      <div className="flex-grow">
                        <StarRating rating={testimonial.rating} className="mb-4" />
                        <p className="text-lg text-gray-700 dark:text-gray-200 leading-relaxed">"{testimonial.quote}"</p>
                      </div>
                      <div className="mt-6 flex items-center gap-4 pt-6 border-t border-gray-200 dark:border-slate-700">
                        <div className="h-12 w-12 rounded-full flex items-center justify-center flex-shrink-0">
                          {testimonial.gender === 'male' ? (
                            <div className="h-full w-full rounded-full flex items-center justify-center bg-blue-100 dark:bg-blue-900/50">
                              <User className="h-7 w-7 text-blue-600 dark:text-blue-400" />
                            </div>
                          ) : (
                            <div className="h-full w-full rounded-full flex items-center justify-center bg-pink-100 dark:bg-pink-900/50">
                              <UserRound className="h-7 w-7 text-pink-600 dark:text-pink-400" />
                            </div>
                          )}
                        </div>
                        <div>
                          <p className="font-semibold text-gray-900 dark:text-white">{testimonial.name}</p>
                          <p className="text-sm text-muted-foreground">{testimonial.title}</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </CarouselItem>
            ))}
          </CarouselContent>
          <CarouselPrevious className="hidden sm:inline-flex" />
          <CarouselNext className="hidden sm:inline-flex" />
        </Carousel>

      </div>
    </AnimatedSection>
  );
};


--- FILE: .\src\components\homepage\StatsSection.tsx ---
"use client";
import { motion, useMotionTemplate, useMotionValue, useSpring, animate } from "framer-motion";
import { useEffect, useRef } from "react";

// <<< PAKEITIMAS: AnimatedCounter perkeltas čia ir supaprastintas >>>
type AnimatedCounterProps = {
  from: number;
  to: number;
  suffix?: string;
};

function AnimatedCounter({ from, to, suffix = "" }: AnimatedCounterProps) {
  const nodeRef = useRef<HTMLParagraphElement>(null);

  useEffect(() => {
    const node = nodeRef.current;
    if (!node) return;

    const controls = animate(from, to, {
      duration: 2,
      ease: "easeOut",
      onUpdate(value) {
        node.textContent = Math.round(value).toLocaleString('lt-LT') + suffix;
      }
    });

    return () => controls.stop();
  }, [from, to]);

  return <p ref={nodeRef} className="text-4xl sm:text-5xl font-bold tracking-tight text-indigo-600 dark:text-indigo-400" />;
}

const stats = [
    {
      name: "Prieinamų Leidėjų",
      value: 250,
      suffix: "+",
    },
    {
      name: "Publikuotų Straipsnių",
      value: 1200,
      suffix: "+",
    },
    {
      name: "Sutaupytų Valandų",
      value: 8700,
      suffix: "+",
    },
    {
      name: "Patenkintų Klientų",
      value: 150,
      suffix: "+",
    },
];

// <<< PAKEITIMAS: Sukuriamas atskiras kortelės komponentas interaktyvumui >>>
const StatCard = ({ stat }: { stat: typeof stats[0] }) => {
    const mouseX = useMotionValue(0);
    const mouseY = useMotionValue(0);
    const smoothMouseX = useSpring(mouseX, { damping: 20, stiffness: 150 });
    const smoothMouseY = useSpring(mouseY, { damping: 20, stiffness: 150 });

    const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
        const { left, top } = e.currentTarget.getBoundingClientRect();
        mouseX.set(e.clientX - left);
        mouseY.set(e.clientY - top);
    };

    return (
        <motion.div
            onMouseMove={handleMouseMove}
            onMouseLeave={() => { mouseX.set(150); mouseY.set(150); }} // Grąžina efektą į centrą
            whileHover={{ scale: 1.03 }}
            transition={{ type: "spring", stiffness: 300, damping: 15 }}
            className="relative bg-white dark:bg-slate-800/50 p-8 rounded-2xl shadow-lg overflow-hidden"
        >
            <motion.div
                className="pointer-events-none absolute -inset-px rounded-2xl opacity-0 transition-opacity duration-300 group-hover:opacity-100"
                style={{
                    background: useMotionTemplate`
                        radial-gradient(
                            300px circle at ${smoothMouseX}px ${smoothMouseY}px,
                            rgba(139, 92, 246, 0.15),
                            transparent 80%
                        )
                    `,
                }}
            />
            <div className="relative z-10 flex flex-col items-center">
                <AnimatedCounter from={0} to={stat.value} suffix={stat.suffix} />
                <p className="mt-2 text-base leading-7 text-muted-foreground">{stat.name}</p>
            </div>
        </motion.div>
    );
};

export const StatsSection = () => {
  return (
    <motion.section
      initial={{ opacity: 0 }}
      whileInView={{ opacity: 1 }}
      viewport={{ once: true, amount: 0.3 }}
      transition={{ duration: 0.8 }}
      className="bg-gray-50 dark:bg-slate-900 py-20 sm:py-28"
    >
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
            <h2 className="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
                Sėkmė, Išmatuojama Skaičiais
            </h2>
            <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
                Mūsų platforma jau padėjo pasiekti apčiuopiamų rezultatų šimtams klientų.
            </p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {stats.map((stat) => (
            <StatCard key={stat.name} stat={stat} />
          ))}
        </div>
      </div>
    </motion.section>
  );
};


--- FILE: .\src\components\homepage\SynergyIcon.tsx ---
// src/components/homepage/SynergyIcon.tsx
"use client";
import { motion } from "framer-motion";
import { Share2 } from "lucide-react";

export const SynergyIcon = () => {
  return (
    <div className="relative flex items-center justify-center">
      {/* Pulsuojantis fonas */}
      <motion.div
        animate={{
          scale: [1, 1.2, 1],
          opacity: [0.7, 1, 0.7],
        }}
        transition={{
          duration: 2.5,
          ease: "easeInOut",
          repeat: Infinity,
        }}
        className="absolute h-16 w-16 rounded-full bg-indigo-500/30 dark:bg-indigo-400/30"
      />
      {/* Pati ikona */}
      <div className="relative rounded-full border border-slate-300 dark:border-slate-700 bg-white dark:bg-slate-900 p-4 shadow-lg">
        <Share2 className="h-8 w-8 text-indigo-600 dark:text-indigo-400" />
      </div>
    </div>
  );
};


--- FILE: .\src\components\homepage\effects\FloatingCode.tsx ---
"use client";
import React, { useRef } from "react";
import { motion, useMotionValue, useTransform, useInView } from "framer-motion";

// Kodo fragmentai, kurie bus rodomi
const codeSnippets = [
  { code: "<h1>", size: "text-2xl", x: "10%", y: "20%" },
  { code: "</>", size: "text-4xl", x: "80%", y: "30%" },
  { code: "{...}", size: "text-xl", x: "15%", y: "75%" },
  { code: "/>", size: "text-3xl", x: "90%", y: "85%" },
  { code: "<div>", size: "text-lg", x: "60%", y: "10%" },
  { code: "</div>", size: "text-5xl", x: "30%", y: "50%" },
  { code: "<span>", size: "text-md", x: "70%", y: "65%" },
];

// Atskiras komponentas vienam fragmentui, kad logika būtų švaresnė
const Snippet = ({ code, size, x, y }: { code: string; size: string; x: string; y: string }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.5 });
  
  // Paralakso faktorius - mažesni elementai juda mažiau, sukurdami gilumą
  const parallaxFactor = (parseInt(size.split('-')[1], 10) || 1) * 0.1;

  // Naudojame motion values iš tėvinio komponento (bus perduoti per context arba props, bet čia supaprastiname)
  // Šiuo atveju tiesiog animuosime juos vietoje
  
  return (
    <motion.div
      ref={ref}
      className={`absolute font-mono text-slate-700 dark:text-slate-500 select-none ${size}`}
      style={{ top: y, left: x, zIndex: 1 }}
      initial={{ opacity: 0, scale: 0.5 }}
      animate={{ 
        opacity: isInView ? 0.3 : 0, 
        scale: isInView ? 1 : 0.5,
        y: [0, -15, 0, 15, 0], // Švelnus "plaukiojimo" efektas
      }}
      transition={{ 
        opacity: { duration: 1, delay: Math.random() * 2 },
        scale: { duration: 1, delay: Math.random() * 2 },
        y: { duration: 10 + Math.random() * 10, repeat: Infinity, ease: "easeInOut" }
      }}
    >
      {code}
    </motion.div>
  );
};

export const FloatingCode = () => {
  const containerRef = useRef<HTMLDivElement>(null);

  // Pelės pozicijos sekimas visame konteineryje
  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);

  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {
    if (containerRef.current) {
      const rect = containerRef.current.getBoundingClientRect();
      mouseX.set(event.clientX - rect.left - rect.width / 2);
      mouseY.set(event.clientY - rect.top - rect.height / 2);
    }
  };
  
  // Transformuojame pelės poziciją į judėjimą
  // Didesnis skaičius (pvz., 0.03) reiškia didesnį judėjimą
  const parallaxX = useTransform(mouseX, (value) => value * 0.03);
  const parallaxY = useTransform(mouseY, (value) => value * 0.03);

  return (
    <motion.div
      ref={containerRef}
      onMouseMove={handleMouseMove}
      onMouseLeave={() => { mouseX.set(0); mouseY.set(0); }}
      className="absolute inset-0 w-full h-full overflow-hidden"
      style={{ x: parallaxX, y: parallaxY, transition: 'transform 0.2s ease-out' }}
    >
      {codeSnippets.map((snippet) => (
        <Snippet key={snippet.code} {...snippet} />
      ))}
    </motion.div>
  );
};


--- FILE: .\src\components\homepage\effects\HeroParticles.tsx ---
// src/components/homepage/effects/HeroParticles.tsx
"use client";

import React, { useCallback } from "react";
import Particles from "react-tsparticles";
import { loadSlim } from "tsparticles-slim";
import type { Engine } from "tsparticles-engine";
import { particlesConfig } from "./particlesConfig";

// <<< PAKEITIMAS: Pridėtas id prop tipas >>>
interface HeroParticlesProps {
  id: string;
}

export const HeroParticles = ({ id }: HeroParticlesProps) => { // <<< PAKEITIMAS: Priimamas id prop >>>
  const particlesInit = useCallback(async (engine: Engine) => {
    await loadSlim(engine);
  }, []);

  return (
    <div className="absolute top-0 left-0 w-full h-full z-0 pointer-events-none">
      <Particles
        id={id} // <<< PAKEITIMAS: Naudojamas perduotas id >>>
        init={particlesInit}
        options={particlesConfig}
        className="h-full w-full"
      />
    </div>
  );
};


--- FILE: .\src\components\homepage\effects\particlesConfig.ts ---
// src/components/homepage/effects/particlesConfig.ts
import type { ISourceOptions } from "tsparticles-engine";

export const particlesConfig: ISourceOptions = {
  fullScreen: {
    enable: false,
    zIndex: 0,
  },
  particles: {
    number: {
      value: 40,
      density: {
        enable: true,
        value_area: 800,
      },
    },
    color: {
      value: "#ffffff",
    },
    shape: {
      type: "circle",
    },
    opacity: {
      value: 0.5,
      random: true,
    },
    size: {
      value: 2,
      random: true,
    },
    links: {
      enable: true,
      distance: 150,
      color: "#ffffff",
      opacity: 0.2,
      width: 1,
    },
    move: {
      enable: true,
      speed: 0.5,
      direction: "none",
      random: true,
      straight: false,
      out_mode: "out",
    },
  },
  interactivity: {
    detect_on: "canvas",
    events: {
      onhover: {
        enable: true,
        mode: "grab",
      },
      onclick: {
        enable: true,
        mode: "push",
      },
      resize: true,
    },
    modes: {
      repulse: {
        distance: 100,
        duration: 0.4,
      },
      push: {
        quantity: 4,
      },
      grab: {
        distance: 180,
        line_linked: {
          opacity: 0.8,
        },
      },
    },
  },
  detectRetina: true,
};


--- FILE: .\src\components\homepage\effects\ScrollIndicator.tsx ---
// src/components/homepage/effects/ScrollIndicator.tsx
"use client";

import { motion } from "framer-motion";
import { ChevronDown } from "lucide-react";

export const ScrollIndicator = () => {
  return (
    <motion.a
      href="#demo"
      aria-label="Slinkti žemyn"
      className="absolute bottom-10 left-1/2 -translate-x-1/2"
      animate={{ y: [0, 10, 0] }}
      transition={{
        duration: 1.5,
        repeat: Infinity,
        ease: "easeInOut",
      }}
    >
      <ChevronDown className="h-8 w-8 text-white/50" />
    </motion.a>
  );
};


--- FILE: .\src\components\ui\accordion.tsx ---
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"

import { cn } from "src/lib/utils"

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }


--- FILE: .\src\components\ui\badge.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


--- FILE: .\src\components\ui\button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "src/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }


--- FILE: .\src\components\ui\card.tsx ---
import * as React from "react"

import { cn } from "src/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}


--- FILE: .\src\components\ui\carousel.tsx ---
"use client";

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "src/lib/utils"
import { Button } from "src/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

function Carousel({
  orientation = "horizontal",
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<"div"> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y",
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === "ArrowLeft") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowRight") {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext]
  )

  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    }
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
}

function CarouselContent({ className, ...props }: React.ComponentProps<"div">) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
}

function CarouselItem({ className, ...props }: React.ComponentProps<"div">) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
}

function CarouselPrevious({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -left-12 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}

function CarouselNext({
  className,
  variant = "outline",
  size = "icon",
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "top-1/2 -right-12 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}


--- FILE: .\src\components\ui\dropdown-menu.tsx ---
// src/components/ui/dropdown-menu.tsx
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Dot } from "lucide-react"

import { cn } from "src/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropmenMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Dot className="h-4 w-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropmenMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


--- FILE: .\src\components\ui\input.tsx ---
import * as React from "react"

import { cn } from "src/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }


--- FILE: .\src\components\ui\label.tsx ---
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


--- FILE: .\src\components\ui\skeleton.tsx ---
import { cn } from "src/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }


--- FILE: .\src\components\ui\tabs.tsx ---
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "src/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }


--- FILE: .\src\components\ui\tooltip.tsx ---
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


--- FILE: .\src\lib\getVersion.ts ---
// src/lib/getVersion.ts
export const currentVersion = () => {
  return "1.0.0"; // Or dynamically load from package.json or environment
};


--- FILE: .\src\lib\image-map.ts ---
// src/lib/image-map.ts
const imageMap: Record<string, string> = {
  'mada': '/foto/tvari-mada.jpg',
  'fashion': '/foto/tvari-mada.jpg',
  'dviratis': '/foto/elektriniai-dviraciai.png',
  'bike': '/foto/elektriniai-dviraciai.png',
  'kripto': '/foto/kriptovaliutos.webp',
  'crypto': '/foto/kriptovaliutos.webp',
  'mityba': '/foto/sveika-mityba.jpg',
  'food': '/foto/sveika-mityba.jpg',
  'intelektas': '/foto/dirbtinis-intelektas.jpg',
  'kaip-publikuota-pades': '/foto/kaip-publikuota-pades.png',
};
const defaultImage = '/foto/default.jpg';
export const getImageForTopic = (topic: string): string => {
  const lowerCaseTopic = topic.toLowerCase();
  const matchingKey = Object.keys(imageMap).find(key => lowerCaseTopic.includes(key));
  return matchingKey ? imageMap[matchingKey] : defaultImage;
};


--- FILE: .\src\lib\utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


